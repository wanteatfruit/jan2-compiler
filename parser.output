Terminals unused in grammar

   TOKEN_FOR
   TOKEN_WHILE
   TOKEN_AUTO
   TOKEN_BACKSLASH
   TOKEN_C_COMMENT
   TOKEN_CPP_COMMENT
   TOKEN_ERROR
   TOKEN_EOF


Grammar

    0 $accept: program $end

    1 program: stmt_list

    2 stmt_list: stmt stmt_list
    3          | stmt

    4 stmt: decl TOKEN_SEMICOLON
    5     | expr TOKEN_SEMICOLON
    6     | TOKEN_PRINT print_list TOKEN_SEMICOLON
    7     | TOKEN_RETURN expr TOKEN_SEMICOLON
    8     | TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN stmt
    9     | TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE stmt
   10     | TOKEN_L_BRACE stmt_list TOKEN_R_BRACE

   11 if_nest: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE if_nest
   12        | decl TOKEN_SEMICOLON
   13        | expr TOKEN_SEMICOLON
   14        | TOKEN_L_BRACE stmt_list TOKEN_R_BRACE

   15 decl: id TOKEN_COLON type
   16     | id TOKEN_COLON type TOKEN_ASSIGN expr
   17     | id TOKEN_COLON type idx type
   18     | id TOKEN_COLON type idx type TOKEN_ASSIGN brac_list
   19     | id TOKEN_COLON TOKEN_FUNCTION type arg_list

   20 brac_list: TOKEN_L_BRACE brac_list TOKEN_R_BRACE
   21          | expr TOKEN_COMMA brac_list
   22          | expr

   23 arg_list: arg TOKEN_COMMA arg_list
   24         | TOKEN_L_PAREN arg_list TOKEN_R_PAREN
   25         | arg

   26 arg: id TOKEN_COLON type

   27 print_list: expr TOKEN_COMMA print_list
   28           | expr
   29           | %empty

   30 idx: TOKEN_L_BRACKET expr TOKEN_R_BRACKET

   31 type: TOKEN_INTEGER
   32     | TOKEN_FLOAT
   33     | TOKEN_BOOLEAN
   34     | TOKEN_CHARACTER
   35     | TOKEN_STRING
   36     | TOKEN_VOID
   37     | TOKEN_ARRAY
   38     | TOKEN_FUNCTION

   39 id: TOKEN_IDENTIFIER

   40 expr: id TOKEN_ASSIGN expr
   41     | expr_or

   42 expr_or: expr_and TOKEN_OR expr_or
   43        | expr_and

   44 expr_and: expr_comp TOKEN_AND expr_and
   45         | expr_comp

   46 expr_comp: expr_add TOKEN_EQUAL expr_comp
   47          | expr_add TOKEN_LESS expr_comp
   48          | expr_add TOKEN_NEQUAL expr_comp
   49          | expr_add TOKEN_LE expr_comp
   50          | expr_add TOKEN_GE expr_comp
   51          | expr_add TOKEN_GREATER expr_comp
   52          | expr_add

   53 expr_add: expr_mul TOKEN_ADD expr_add
   54         | expr_mul TOKEN_SUB expr_add
   55         | expr_mul

   56 expr_mul: expr_exp TOKEN_MUL expr_mul
   57         | expr_exp TOKEN_DIV expr_mul
   58         | expr_exp TOKEN_MOD expr_mul
   59         | expr_exp

   60 expr_exp: expr_unary TOKEN_EXP expr_exp
   61         | expr_unary

   62 expr_unary: TOKEN_NEG expr_unary
   63           | TOKEN_NOT expr_unary
   64           | exp_post

   65 exp_post: factor TOKEN_POSTINC
   66         | factor TOKEN_POSTDEC
   67         | factor

   68 factor: TOKEN_L_PAREN expr TOKEN_R_PAREN
   69       | literal
   70       | id

   71 literal: TOKEN_INTEGER_LITERAL
   72        | TOKEN_FLOAT_LITERAL
   73        | TOKEN_CHARACTER_LITERAL
   74        | TOKEN_STRING_LITERAL
   75        | TOKEN_TRUE
   76        | TOKEN_FALSE


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKEN_ARRAY (258) 37
TOKEN_BOOLEAN (259) 33
TOKEN_CHARACTER (260) 34
TOKEN_FLOAT (261) 32
TOKEN_FUNCTION (262) 19 38
TOKEN_INTEGER (263) 31
TOKEN_STRING (264) 35
TOKEN_VOID (265) 36
TOKEN_INTEGER_LITERAL (266) 71
TOKEN_CHARACTER_LITERAL (267) 73
TOKEN_STRING_LITERAL (268) 74
TOKEN_FLOAT_LITERAL (269) 72
TOKEN_ELSE (270) 9 11
TOKEN_FALSE (271) 76
TOKEN_FOR (272)
TOKEN_IF (273) 8 9 11
TOKEN_PRINT (274) 6
TOKEN_RETURN (275) 7
TOKEN_TRUE (276) 75
TOKEN_WHILE (277)
TOKEN_AUTO (278)
TOKEN_IDENTIFIER (279) 39
TOKEN_L_PAREN (280) 8 9 11 24 68
TOKEN_R_PAREN (281) 8 9 11 24 68
TOKEN_L_BRACKET (282) 30
TOKEN_R_BRACKET (283) 30
TOKEN_L_BRACE (284) 10 14 20
TOKEN_R_BRACE (285) 10 14 20
TOKEN_POSTINC (286) 65
TOKEN_POSTDEC (287) 66
TOKEN_NEG (288) 62
TOKEN_NOT (289) 63
TOKEN_EXP (290) 60
TOKEN_MUL (291) 56
TOKEN_DIV (292) 57
TOKEN_MOD (293) 58
TOKEN_ADD (294) 53
TOKEN_SUB (295) 54
TOKEN_LESS (296) 47
TOKEN_LE (297) 49
TOKEN_GE (298) 50
TOKEN_GREATER (299) 51
TOKEN_EQUAL (300) 46
TOKEN_NEQUAL (301) 48
TOKEN_AND (302) 44
TOKEN_OR (303) 42
TOKEN_ASSIGN (304) 16 18 40
TOKEN_SEMICOLON (305) 4 5 6 7 12 13
TOKEN_COLON (306) 15 16 17 18 19 26
TOKEN_COMMA (307) 21 23 27
TOKEN_BACKSLASH (308)
TOKEN_C_COMMENT (309)
TOKEN_CPP_COMMENT (310)
TOKEN_ERROR (311)
TOKEN_EOF (312)


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
program (59)
    on left: 1, on right: 0
stmt_list (60)
    on left: 2 3, on right: 1 2 10 14
stmt (61)
    on left: 4 5 6 7 8 9 10, on right: 2 3 8 9
if_nest (62)
    on left: 11 12 13 14, on right: 9 11
decl (63)
    on left: 15 16 17 18 19, on right: 4 12
brac_list (64)
    on left: 20 21 22, on right: 18 20 21
arg_list (65)
    on left: 23 24 25, on right: 19 23 24
arg (66)
    on left: 26, on right: 23 25
print_list (67)
    on left: 27 28 29, on right: 6 27
idx (68)
    on left: 30, on right: 17 18
type (69)
    on left: 31 32 33 34 35 36 37 38, on right: 15 16 17 18 19 26
id (70)
    on left: 39, on right: 15 16 17 18 19 26 40 70
expr (71)
    on left: 40 41, on right: 5 7 8 9 11 13 16 21 22 27 28 30 40 68
expr_or (72)
    on left: 42 43, on right: 41 42
expr_and (73)
    on left: 44 45, on right: 42 43 44
expr_comp (74)
    on left: 46 47 48 49 50 51 52, on right: 44 45 46 47 48 49 50 51
expr_add (75)
    on left: 53 54 55, on right: 46 47 48 49 50 51 52 53 54
expr_mul (76)
    on left: 56 57 58 59, on right: 53 54 55 56 57 58
expr_exp (77)
    on left: 60 61, on right: 56 57 58 59 60
expr_unary (78)
    on left: 62 63 64, on right: 60 61 62 63
exp_post (79)
    on left: 65 66 67, on right: 64
factor (80)
    on left: 68 69 70, on right: 65 66 67
literal (81)
    on left: 71 72 73 74 75 76, on right: 69


State 0

    0 $accept: . program $end

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_IF                 shift, and go to state 6
    TOKEN_PRINT              shift, and go to state 7
    TOKEN_RETURN             shift, and go to state 8
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_L_BRACE            shift, and go to state 12
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    program     go to state 15
    stmt_list   go to state 16
    stmt        go to state 17
    decl        go to state 18
    id          go to state 19
    expr        go to state 20
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 1

   71 literal: TOKEN_INTEGER_LITERAL .

    $default  reduce using rule 71 (literal)


State 2

   73 literal: TOKEN_CHARACTER_LITERAL .

    $default  reduce using rule 73 (literal)


State 3

   74 literal: TOKEN_STRING_LITERAL .

    $default  reduce using rule 74 (literal)


State 4

   72 literal: TOKEN_FLOAT_LITERAL .

    $default  reduce using rule 72 (literal)


State 5

   76 literal: TOKEN_FALSE .

    $default  reduce using rule 76 (literal)


State 6

    8 stmt: TOKEN_IF . TOKEN_L_PAREN expr TOKEN_R_PAREN stmt
    9     | TOKEN_IF . TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE stmt

    TOKEN_L_PAREN  shift, and go to state 31


State 7

    6 stmt: TOKEN_PRINT . print_list TOKEN_SEMICOLON

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    $default  reduce using rule 29 (print_list)

    print_list  go to state 32
    id          go to state 33
    expr        go to state 34
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 8

    7 stmt: TOKEN_RETURN . expr TOKEN_SEMICOLON

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 33
    expr        go to state 35
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 9

   75 literal: TOKEN_TRUE .

    $default  reduce using rule 75 (literal)


State 10

   39 id: TOKEN_IDENTIFIER .

    $default  reduce using rule 39 (id)


State 11

   68 factor: TOKEN_L_PAREN . expr TOKEN_R_PAREN

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 33
    expr        go to state 36
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 12

   10 stmt: TOKEN_L_BRACE . stmt_list TOKEN_R_BRACE

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_IF                 shift, and go to state 6
    TOKEN_PRINT              shift, and go to state 7
    TOKEN_RETURN             shift, and go to state 8
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_L_BRACE            shift, and go to state 12
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    stmt_list   go to state 37
    stmt        go to state 17
    decl        go to state 18
    id          go to state 19
    expr        go to state 20
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 13

   62 expr_unary: TOKEN_NEG . expr_unary

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 38
    expr_unary  go to state 39
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 14

   63 expr_unary: TOKEN_NOT . expr_unary

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 38
    expr_unary  go to state 40
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 15

    0 $accept: program . $end

    $end  shift, and go to state 41


State 16

    1 program: stmt_list .

    $default  reduce using rule 1 (program)


State 17

    2 stmt_list: stmt . stmt_list
    3          | stmt .

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_IF                 shift, and go to state 6
    TOKEN_PRINT              shift, and go to state 7
    TOKEN_RETURN             shift, and go to state 8
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_L_BRACE            shift, and go to state 12
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    $default  reduce using rule 3 (stmt_list)

    stmt_list   go to state 42
    stmt        go to state 17
    decl        go to state 18
    id          go to state 19
    expr        go to state 20
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 18

    4 stmt: decl . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 43


State 19

   15 decl: id . TOKEN_COLON type
   16     | id . TOKEN_COLON type TOKEN_ASSIGN expr
   17     | id . TOKEN_COLON type idx type
   18     | id . TOKEN_COLON type idx type TOKEN_ASSIGN brac_list
   19     | id . TOKEN_COLON TOKEN_FUNCTION type arg_list
   40 expr: id . TOKEN_ASSIGN expr
   70 factor: id .

    TOKEN_ASSIGN  shift, and go to state 44
    TOKEN_COLON   shift, and go to state 45

    $default  reduce using rule 70 (factor)


State 20

    5 stmt: expr . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 46


State 21

   41 expr: expr_or .

    $default  reduce using rule 41 (expr)


State 22

   42 expr_or: expr_and . TOKEN_OR expr_or
   43        | expr_and .

    TOKEN_OR  shift, and go to state 47

    $default  reduce using rule 43 (expr_or)


State 23

   44 expr_and: expr_comp . TOKEN_AND expr_and
   45         | expr_comp .

    TOKEN_AND  shift, and go to state 48

    $default  reduce using rule 45 (expr_and)


State 24

   46 expr_comp: expr_add . TOKEN_EQUAL expr_comp
   47          | expr_add . TOKEN_LESS expr_comp
   48          | expr_add . TOKEN_NEQUAL expr_comp
   49          | expr_add . TOKEN_LE expr_comp
   50          | expr_add . TOKEN_GE expr_comp
   51          | expr_add . TOKEN_GREATER expr_comp
   52          | expr_add .

    TOKEN_LESS     shift, and go to state 49
    TOKEN_LE       shift, and go to state 50
    TOKEN_GE       shift, and go to state 51
    TOKEN_GREATER  shift, and go to state 52
    TOKEN_EQUAL    shift, and go to state 53
    TOKEN_NEQUAL   shift, and go to state 54

    $default  reduce using rule 52 (expr_comp)


State 25

   53 expr_add: expr_mul . TOKEN_ADD expr_add
   54         | expr_mul . TOKEN_SUB expr_add
   55         | expr_mul .

    TOKEN_ADD  shift, and go to state 55
    TOKEN_SUB  shift, and go to state 56

    $default  reduce using rule 55 (expr_add)


State 26

   56 expr_mul: expr_exp . TOKEN_MUL expr_mul
   57         | expr_exp . TOKEN_DIV expr_mul
   58         | expr_exp . TOKEN_MOD expr_mul
   59         | expr_exp .

    TOKEN_MUL  shift, and go to state 57
    TOKEN_DIV  shift, and go to state 58
    TOKEN_MOD  shift, and go to state 59

    $default  reduce using rule 59 (expr_mul)


State 27

   60 expr_exp: expr_unary . TOKEN_EXP expr_exp
   61         | expr_unary .

    TOKEN_EXP  shift, and go to state 60

    $default  reduce using rule 61 (expr_exp)


State 28

   64 expr_unary: exp_post .

    $default  reduce using rule 64 (expr_unary)


State 29

   65 exp_post: factor . TOKEN_POSTINC
   66         | factor . TOKEN_POSTDEC
   67         | factor .

    TOKEN_POSTINC  shift, and go to state 61
    TOKEN_POSTDEC  shift, and go to state 62

    $default  reduce using rule 67 (exp_post)


State 30

   69 factor: literal .

    $default  reduce using rule 69 (factor)


State 31

    8 stmt: TOKEN_IF TOKEN_L_PAREN . expr TOKEN_R_PAREN stmt
    9     | TOKEN_IF TOKEN_L_PAREN . expr TOKEN_R_PAREN if_nest TOKEN_ELSE stmt

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 33
    expr        go to state 63
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 32

    6 stmt: TOKEN_PRINT print_list . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 64


State 33

   40 expr: id . TOKEN_ASSIGN expr
   70 factor: id .

    TOKEN_ASSIGN  shift, and go to state 44

    $default  reduce using rule 70 (factor)


State 34

   27 print_list: expr . TOKEN_COMMA print_list
   28           | expr .

    TOKEN_COMMA  shift, and go to state 65

    $default  reduce using rule 28 (print_list)


State 35

    7 stmt: TOKEN_RETURN expr . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 66


State 36

   68 factor: TOKEN_L_PAREN expr . TOKEN_R_PAREN

    TOKEN_R_PAREN  shift, and go to state 67


State 37

   10 stmt: TOKEN_L_BRACE stmt_list . TOKEN_R_BRACE

    TOKEN_R_BRACE  shift, and go to state 68


State 38

   70 factor: id .

    $default  reduce using rule 70 (factor)


State 39

   62 expr_unary: TOKEN_NEG expr_unary .

    $default  reduce using rule 62 (expr_unary)


State 40

   63 expr_unary: TOKEN_NOT expr_unary .

    $default  reduce using rule 63 (expr_unary)


State 41

    0 $accept: program $end .

    $default  accept


State 42

    2 stmt_list: stmt stmt_list .

    $default  reduce using rule 2 (stmt_list)


State 43

    4 stmt: decl TOKEN_SEMICOLON .

    $default  reduce using rule 4 (stmt)


State 44

   40 expr: id TOKEN_ASSIGN . expr

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 33
    expr        go to state 69
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 45

   15 decl: id TOKEN_COLON . type
   16     | id TOKEN_COLON . type TOKEN_ASSIGN expr
   17     | id TOKEN_COLON . type idx type
   18     | id TOKEN_COLON . type idx type TOKEN_ASSIGN brac_list
   19     | id TOKEN_COLON . TOKEN_FUNCTION type arg_list

    TOKEN_ARRAY      shift, and go to state 70
    TOKEN_BOOLEAN    shift, and go to state 71
    TOKEN_CHARACTER  shift, and go to state 72
    TOKEN_FLOAT      shift, and go to state 73
    TOKEN_FUNCTION   shift, and go to state 74
    TOKEN_INTEGER    shift, and go to state 75
    TOKEN_STRING     shift, and go to state 76
    TOKEN_VOID       shift, and go to state 77

    type  go to state 78


State 46

    5 stmt: expr TOKEN_SEMICOLON .

    $default  reduce using rule 5 (stmt)


State 47

   42 expr_or: expr_and TOKEN_OR . expr_or

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 38
    expr_or     go to state 79
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 48

   44 expr_and: expr_comp TOKEN_AND . expr_and

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 38
    expr_and    go to state 80
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 49

   47 expr_comp: expr_add TOKEN_LESS . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 38
    expr_comp   go to state 81
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 50

   49 expr_comp: expr_add TOKEN_LE . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 38
    expr_comp   go to state 82
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 51

   50 expr_comp: expr_add TOKEN_GE . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 38
    expr_comp   go to state 83
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 52

   51 expr_comp: expr_add TOKEN_GREATER . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 38
    expr_comp   go to state 84
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 53

   46 expr_comp: expr_add TOKEN_EQUAL . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 38
    expr_comp   go to state 85
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 54

   48 expr_comp: expr_add TOKEN_NEQUAL . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 38
    expr_comp   go to state 86
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 55

   53 expr_add: expr_mul TOKEN_ADD . expr_add

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 38
    expr_add    go to state 87
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 56

   54 expr_add: expr_mul TOKEN_SUB . expr_add

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 38
    expr_add    go to state 88
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 57

   56 expr_mul: expr_exp TOKEN_MUL . expr_mul

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 38
    expr_mul    go to state 89
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 58

   57 expr_mul: expr_exp TOKEN_DIV . expr_mul

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 38
    expr_mul    go to state 90
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 59

   58 expr_mul: expr_exp TOKEN_MOD . expr_mul

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 38
    expr_mul    go to state 91
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 60

   60 expr_exp: expr_unary TOKEN_EXP . expr_exp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 38
    expr_exp    go to state 92
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 61

   65 exp_post: factor TOKEN_POSTINC .

    $default  reduce using rule 65 (exp_post)


State 62

   66 exp_post: factor TOKEN_POSTDEC .

    $default  reduce using rule 66 (exp_post)


State 63

    8 stmt: TOKEN_IF TOKEN_L_PAREN expr . TOKEN_R_PAREN stmt
    9     | TOKEN_IF TOKEN_L_PAREN expr . TOKEN_R_PAREN if_nest TOKEN_ELSE stmt

    TOKEN_R_PAREN  shift, and go to state 93


State 64

    6 stmt: TOKEN_PRINT print_list TOKEN_SEMICOLON .

    $default  reduce using rule 6 (stmt)


State 65

   27 print_list: expr TOKEN_COMMA . print_list

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    $default  reduce using rule 29 (print_list)

    print_list  go to state 94
    id          go to state 33
    expr        go to state 34
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 66

    7 stmt: TOKEN_RETURN expr TOKEN_SEMICOLON .

    $default  reduce using rule 7 (stmt)


State 67

   68 factor: TOKEN_L_PAREN expr TOKEN_R_PAREN .

    $default  reduce using rule 68 (factor)


State 68

   10 stmt: TOKEN_L_BRACE stmt_list TOKEN_R_BRACE .

    $default  reduce using rule 10 (stmt)


State 69

   40 expr: id TOKEN_ASSIGN expr .

    $default  reduce using rule 40 (expr)


State 70

   37 type: TOKEN_ARRAY .

    $default  reduce using rule 37 (type)


State 71

   33 type: TOKEN_BOOLEAN .

    $default  reduce using rule 33 (type)


State 72

   34 type: TOKEN_CHARACTER .

    $default  reduce using rule 34 (type)


State 73

   32 type: TOKEN_FLOAT .

    $default  reduce using rule 32 (type)


State 74

   19 decl: id TOKEN_COLON TOKEN_FUNCTION . type arg_list
   38 type: TOKEN_FUNCTION .

    TOKEN_ARRAY      shift, and go to state 70
    TOKEN_BOOLEAN    shift, and go to state 71
    TOKEN_CHARACTER  shift, and go to state 72
    TOKEN_FLOAT      shift, and go to state 73
    TOKEN_FUNCTION   shift, and go to state 95
    TOKEN_INTEGER    shift, and go to state 75
    TOKEN_STRING     shift, and go to state 76
    TOKEN_VOID       shift, and go to state 77

    $default  reduce using rule 38 (type)

    type  go to state 96


State 75

   31 type: TOKEN_INTEGER .

    $default  reduce using rule 31 (type)


State 76

   35 type: TOKEN_STRING .

    $default  reduce using rule 35 (type)


State 77

   36 type: TOKEN_VOID .

    $default  reduce using rule 36 (type)


State 78

   15 decl: id TOKEN_COLON type .
   16     | id TOKEN_COLON type . TOKEN_ASSIGN expr
   17     | id TOKEN_COLON type . idx type
   18     | id TOKEN_COLON type . idx type TOKEN_ASSIGN brac_list

    TOKEN_L_BRACKET  shift, and go to state 97
    TOKEN_ASSIGN     shift, and go to state 98

    $default  reduce using rule 15 (decl)

    idx  go to state 99


State 79

   42 expr_or: expr_and TOKEN_OR expr_or .

    $default  reduce using rule 42 (expr_or)


State 80

   44 expr_and: expr_comp TOKEN_AND expr_and .

    $default  reduce using rule 44 (expr_and)


State 81

   47 expr_comp: expr_add TOKEN_LESS expr_comp .

    $default  reduce using rule 47 (expr_comp)


State 82

   49 expr_comp: expr_add TOKEN_LE expr_comp .

    $default  reduce using rule 49 (expr_comp)


State 83

   50 expr_comp: expr_add TOKEN_GE expr_comp .

    $default  reduce using rule 50 (expr_comp)


State 84

   51 expr_comp: expr_add TOKEN_GREATER expr_comp .

    $default  reduce using rule 51 (expr_comp)


State 85

   46 expr_comp: expr_add TOKEN_EQUAL expr_comp .

    $default  reduce using rule 46 (expr_comp)


State 86

   48 expr_comp: expr_add TOKEN_NEQUAL expr_comp .

    $default  reduce using rule 48 (expr_comp)


State 87

   53 expr_add: expr_mul TOKEN_ADD expr_add .

    $default  reduce using rule 53 (expr_add)


State 88

   54 expr_add: expr_mul TOKEN_SUB expr_add .

    $default  reduce using rule 54 (expr_add)


State 89

   56 expr_mul: expr_exp TOKEN_MUL expr_mul .

    $default  reduce using rule 56 (expr_mul)


State 90

   57 expr_mul: expr_exp TOKEN_DIV expr_mul .

    $default  reduce using rule 57 (expr_mul)


State 91

   58 expr_mul: expr_exp TOKEN_MOD expr_mul .

    $default  reduce using rule 58 (expr_mul)


State 92

   60 expr_exp: expr_unary TOKEN_EXP expr_exp .

    $default  reduce using rule 60 (expr_exp)


State 93

    8 stmt: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN . stmt
    9     | TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN . if_nest TOKEN_ELSE stmt

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_IF                 shift, and go to state 100
    TOKEN_PRINT              shift, and go to state 7
    TOKEN_RETURN             shift, and go to state 8
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_L_BRACE            shift, and go to state 101
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    stmt        go to state 102
    if_nest     go to state 103
    decl        go to state 104
    id          go to state 19
    expr        go to state 105
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 94

   27 print_list: expr TOKEN_COMMA print_list .

    $default  reduce using rule 27 (print_list)


State 95

   38 type: TOKEN_FUNCTION .

    $default  reduce using rule 38 (type)


State 96

   19 decl: id TOKEN_COLON TOKEN_FUNCTION type . arg_list

    TOKEN_IDENTIFIER  shift, and go to state 10
    TOKEN_L_PAREN     shift, and go to state 106

    arg_list  go to state 107
    arg       go to state 108
    id        go to state 109


State 97

   30 idx: TOKEN_L_BRACKET . expr TOKEN_R_BRACKET

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 33
    expr        go to state 110
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 98

   16 decl: id TOKEN_COLON type TOKEN_ASSIGN . expr

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 33
    expr        go to state 111
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 99

   17 decl: id TOKEN_COLON type idx . type
   18     | id TOKEN_COLON type idx . type TOKEN_ASSIGN brac_list

    TOKEN_ARRAY      shift, and go to state 70
    TOKEN_BOOLEAN    shift, and go to state 71
    TOKEN_CHARACTER  shift, and go to state 72
    TOKEN_FLOAT      shift, and go to state 73
    TOKEN_FUNCTION   shift, and go to state 95
    TOKEN_INTEGER    shift, and go to state 75
    TOKEN_STRING     shift, and go to state 76
    TOKEN_VOID       shift, and go to state 77

    type  go to state 112


State 100

    8 stmt: TOKEN_IF . TOKEN_L_PAREN expr TOKEN_R_PAREN stmt
    9     | TOKEN_IF . TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE stmt
   11 if_nest: TOKEN_IF . TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE if_nest

    TOKEN_L_PAREN  shift, and go to state 113


State 101

   10 stmt: TOKEN_L_BRACE . stmt_list TOKEN_R_BRACE
   14 if_nest: TOKEN_L_BRACE . stmt_list TOKEN_R_BRACE

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_IF                 shift, and go to state 6
    TOKEN_PRINT              shift, and go to state 7
    TOKEN_RETURN             shift, and go to state 8
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_L_BRACE            shift, and go to state 12
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    stmt_list   go to state 114
    stmt        go to state 17
    decl        go to state 18
    id          go to state 19
    expr        go to state 20
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 102

    8 stmt: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN stmt .

    $default  reduce using rule 8 (stmt)


State 103

    9 stmt: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest . TOKEN_ELSE stmt

    TOKEN_ELSE  shift, and go to state 115


State 104

    4 stmt: decl . TOKEN_SEMICOLON
   12 if_nest: decl . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 116


State 105

    5 stmt: expr . TOKEN_SEMICOLON
   13 if_nest: expr . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 117


State 106

   24 arg_list: TOKEN_L_PAREN . arg_list TOKEN_R_PAREN

    TOKEN_IDENTIFIER  shift, and go to state 10
    TOKEN_L_PAREN     shift, and go to state 106

    arg_list  go to state 118
    arg       go to state 108
    id        go to state 109


State 107

   19 decl: id TOKEN_COLON TOKEN_FUNCTION type arg_list .

    $default  reduce using rule 19 (decl)


State 108

   23 arg_list: arg . TOKEN_COMMA arg_list
   25         | arg .

    TOKEN_COMMA  shift, and go to state 119

    $default  reduce using rule 25 (arg_list)


State 109

   26 arg: id . TOKEN_COLON type

    TOKEN_COLON  shift, and go to state 120


State 110

   30 idx: TOKEN_L_BRACKET expr . TOKEN_R_BRACKET

    TOKEN_R_BRACKET  shift, and go to state 121


State 111

   16 decl: id TOKEN_COLON type TOKEN_ASSIGN expr .

    $default  reduce using rule 16 (decl)


State 112

   17 decl: id TOKEN_COLON type idx type .
   18     | id TOKEN_COLON type idx type . TOKEN_ASSIGN brac_list

    TOKEN_ASSIGN  shift, and go to state 122

    $default  reduce using rule 17 (decl)


State 113

    8 stmt: TOKEN_IF TOKEN_L_PAREN . expr TOKEN_R_PAREN stmt
    9     | TOKEN_IF TOKEN_L_PAREN . expr TOKEN_R_PAREN if_nest TOKEN_ELSE stmt
   11 if_nest: TOKEN_IF TOKEN_L_PAREN . expr TOKEN_R_PAREN if_nest TOKEN_ELSE if_nest

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    id          go to state 33
    expr        go to state 123
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 114

   10 stmt: TOKEN_L_BRACE stmt_list . TOKEN_R_BRACE
   14 if_nest: TOKEN_L_BRACE stmt_list . TOKEN_R_BRACE

    TOKEN_R_BRACE  shift, and go to state 124


State 115

    9 stmt: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE . stmt

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_IF                 shift, and go to state 6
    TOKEN_PRINT              shift, and go to state 7
    TOKEN_RETURN             shift, and go to state 8
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_L_BRACE            shift, and go to state 12
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    stmt        go to state 125
    decl        go to state 18
    id          go to state 19
    expr        go to state 20
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 116

    4 stmt: decl TOKEN_SEMICOLON .
   12 if_nest: decl TOKEN_SEMICOLON .

    TOKEN_ELSE  reduce using rule 12 (if_nest)
    $default    reduce using rule 4 (stmt)


State 117

    5 stmt: expr TOKEN_SEMICOLON .
   13 if_nest: expr TOKEN_SEMICOLON .

    TOKEN_ELSE  reduce using rule 13 (if_nest)
    $default    reduce using rule 5 (stmt)


State 118

   24 arg_list: TOKEN_L_PAREN arg_list . TOKEN_R_PAREN

    TOKEN_R_PAREN  shift, and go to state 126


State 119

   23 arg_list: arg TOKEN_COMMA . arg_list

    TOKEN_IDENTIFIER  shift, and go to state 10
    TOKEN_L_PAREN     shift, and go to state 106

    arg_list  go to state 127
    arg       go to state 108
    id        go to state 109


State 120

   26 arg: id TOKEN_COLON . type

    TOKEN_ARRAY      shift, and go to state 70
    TOKEN_BOOLEAN    shift, and go to state 71
    TOKEN_CHARACTER  shift, and go to state 72
    TOKEN_FLOAT      shift, and go to state 73
    TOKEN_FUNCTION   shift, and go to state 95
    TOKEN_INTEGER    shift, and go to state 75
    TOKEN_STRING     shift, and go to state 76
    TOKEN_VOID       shift, and go to state 77

    type  go to state 128


State 121

   30 idx: TOKEN_L_BRACKET expr TOKEN_R_BRACKET .

    $default  reduce using rule 30 (idx)


State 122

   18 decl: id TOKEN_COLON type idx type TOKEN_ASSIGN . brac_list

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_L_BRACE            shift, and go to state 129
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    brac_list   go to state 130
    id          go to state 33
    expr        go to state 131
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 123

    8 stmt: TOKEN_IF TOKEN_L_PAREN expr . TOKEN_R_PAREN stmt
    9     | TOKEN_IF TOKEN_L_PAREN expr . TOKEN_R_PAREN if_nest TOKEN_ELSE stmt
   11 if_nest: TOKEN_IF TOKEN_L_PAREN expr . TOKEN_R_PAREN if_nest TOKEN_ELSE if_nest

    TOKEN_R_PAREN  shift, and go to state 132


State 124

   10 stmt: TOKEN_L_BRACE stmt_list TOKEN_R_BRACE .
   14 if_nest: TOKEN_L_BRACE stmt_list TOKEN_R_BRACE .

    TOKEN_ELSE  reduce using rule 14 (if_nest)
    $default    reduce using rule 10 (stmt)


State 125

    9 stmt: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE stmt .

    $default  reduce using rule 9 (stmt)


State 126

   24 arg_list: TOKEN_L_PAREN arg_list TOKEN_R_PAREN .

    $default  reduce using rule 24 (arg_list)


State 127

   23 arg_list: arg TOKEN_COMMA arg_list .

    $default  reduce using rule 23 (arg_list)


State 128

   26 arg: id TOKEN_COLON type .

    $default  reduce using rule 26 (arg)


State 129

   20 brac_list: TOKEN_L_BRACE . brac_list TOKEN_R_BRACE

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_L_BRACE            shift, and go to state 129
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    brac_list   go to state 133
    id          go to state 33
    expr        go to state 131
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 130

   18 decl: id TOKEN_COLON type idx type TOKEN_ASSIGN brac_list .

    $default  reduce using rule 18 (decl)


State 131

   21 brac_list: expr . TOKEN_COMMA brac_list
   22          | expr .

    TOKEN_COMMA  shift, and go to state 134

    $default  reduce using rule 22 (brac_list)


State 132

    8 stmt: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN . stmt
    9     | TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN . if_nest TOKEN_ELSE stmt
   11 if_nest: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN . if_nest TOKEN_ELSE if_nest

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_IF                 shift, and go to state 100
    TOKEN_PRINT              shift, and go to state 7
    TOKEN_RETURN             shift, and go to state 8
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_L_BRACE            shift, and go to state 101
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    stmt        go to state 102
    if_nest     go to state 135
    decl        go to state 104
    id          go to state 19
    expr        go to state 105
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 133

   20 brac_list: TOKEN_L_BRACE brac_list . TOKEN_R_BRACE

    TOKEN_R_BRACE  shift, and go to state 136


State 134

   21 brac_list: expr TOKEN_COMMA . brac_list

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_L_BRACE            shift, and go to state 129
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    brac_list   go to state 137
    id          go to state 33
    expr        go to state 131
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 135

    9 stmt: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest . TOKEN_ELSE stmt
   11 if_nest: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest . TOKEN_ELSE if_nest

    TOKEN_ELSE  shift, and go to state 138


State 136

   20 brac_list: TOKEN_L_BRACE brac_list TOKEN_R_BRACE .

    $default  reduce using rule 20 (brac_list)


State 137

   21 brac_list: expr TOKEN_COMMA brac_list .

    $default  reduce using rule 21 (brac_list)


State 138

    9 stmt: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE . stmt
   11 if_nest: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE . if_nest

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_IF                 shift, and go to state 100
    TOKEN_PRINT              shift, and go to state 7
    TOKEN_RETURN             shift, and go to state 8
    TOKEN_TRUE               shift, and go to state 9
    TOKEN_IDENTIFIER         shift, and go to state 10
    TOKEN_L_PAREN            shift, and go to state 11
    TOKEN_L_BRACE            shift, and go to state 101
    TOKEN_NEG                shift, and go to state 13
    TOKEN_NOT                shift, and go to state 14

    stmt        go to state 125
    if_nest     go to state 139
    decl        go to state 104
    id          go to state 19
    expr        go to state 105
    expr_or     go to state 21
    expr_and    go to state 22
    expr_comp   go to state 23
    expr_add    go to state 24
    expr_mul    go to state 25
    expr_exp    go to state 26
    expr_unary  go to state 27
    exp_post    go to state 28
    factor      go to state 29
    literal     go to state 30


State 139

   11 if_nest: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE if_nest .

    $default  reduce using rule 11 (if_nest)
