Terminals unused in grammar

   TOKEN_ELSE
   TOKEN_FOR
   TOKEN_IF
   TOKEN_PRINT
   TOKEN_RETURN
   TOKEN_WHILE
   TOKEN_AUTO
   TOKEN_BACKSLASH
   TOKEN_C_COMMENT
   TOKEN_CPP_COMMENT
   TOKEN_ERROR
   TOKEN_EOF


Grammar

    0 $accept: program $end

    1 program: stmt_list

    2 stmt_list: stmt stmt_list
    3          | stmt

    4 stmt: decl TOKEN_SEMICOLON
    5     | expr TOKEN_SEMICOLON

    6 decl: id TOKEN_COLON type
    7     | id TOKEN_COLON type TOKEN_ASSIGN expr
    8     | id TOKEN_COLON type idx type
    9     | id TOKEN_COLON type idx type TOKEN_ASSIGN brac_list
   10     | id TOKEN_COLON TOKEN_FUNCTION type arg_list

   11 brac_list: TOKEN_L_BRACE brac_list TOKEN_R_BRACE
   12          | expr TOKEN_COMMA brac_list
   13          | expr

   14 arg_list: arg TOKEN_COMMA arg_list
   15         | TOKEN_L_PAREN arg_list TOKEN_R_PAREN
   16         | arg

   17 arg: id TOKEN_COLON type

   18 idx: TOKEN_L_BRACKET expr TOKEN_R_BRACKET

   19 type: TOKEN_INTEGER
   20     | TOKEN_FLOAT
   21     | TOKEN_BOOLEAN
   22     | TOKEN_CHARACTER
   23     | TOKEN_STRING
   24     | TOKEN_VOID
   25     | TOKEN_ARRAY
   26     | TOKEN_FUNCTION

   27 id: TOKEN_IDENTIFIER

   28 expr: id TOKEN_ASSIGN expr
   29     | expr_or

   30 expr_or: expr_and TOKEN_OR expr_or
   31        | expr_and

   32 expr_and: expr_comp TOKEN_AND expr_and
   33         | expr_comp

   34 expr_comp: expr_add TOKEN_EQUAL expr_comp
   35          | expr_add TOKEN_LESS expr_comp
   36          | expr_add TOKEN_NEQUAL expr_comp
   37          | expr_add TOKEN_LE expr_comp
   38          | expr_add TOKEN_GE expr_comp
   39          | expr_add TOKEN_GREATER expr_comp
   40          | expr_add

   41 expr_add: expr_mul TOKEN_ADD expr_add
   42         | expr_mul TOKEN_SUB expr_add
   43         | expr_mul

   44 expr_mul: expr_exp TOKEN_MUL expr_mul
   45         | expr_exp TOKEN_DIV expr_mul
   46         | expr_exp TOKEN_MOD expr_mul
   47         | expr_exp

   48 expr_exp: expr_unary TOKEN_EXP expr_exp
   49         | expr_unary

   50 expr_unary: TOKEN_NEG expr_unary
   51           | TOKEN_NOT expr_unary
   52           | exp_post

   53 exp_post: factor TOKEN_POSTINC
   54         | factor TOKEN_POSTDEC
   55         | factor

   56 factor: TOKEN_L_PAREN expr TOKEN_R_PAREN
   57       | literal

   58 literal: TOKEN_INTEGER_LITERAL
   59        | TOKEN_FLOAT_LITERAL
   60        | TOKEN_CHARACTER_LITERAL
   61        | TOKEN_STRING_LITERAL
   62        | TOKEN_TRUE
   63        | TOKEN_FALSE


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKEN_ARRAY (258) 25
TOKEN_BOOLEAN (259) 21
TOKEN_CHARACTER (260) 22
TOKEN_FLOAT (261) 20
TOKEN_FUNCTION (262) 10 26
TOKEN_INTEGER (263) 19
TOKEN_STRING (264) 23
TOKEN_VOID (265) 24
TOKEN_INTEGER_LITERAL (266) 58
TOKEN_CHARACTER_LITERAL (267) 60
TOKEN_STRING_LITERAL (268) 61
TOKEN_FLOAT_LITERAL (269) 59
TOKEN_ELSE (270)
TOKEN_FALSE (271) 63
TOKEN_FOR (272)
TOKEN_IF (273)
TOKEN_PRINT (274)
TOKEN_RETURN (275)
TOKEN_TRUE (276) 62
TOKEN_WHILE (277)
TOKEN_AUTO (278)
TOKEN_IDENTIFIER (279) 27
TOKEN_L_PAREN (280) 15 56
TOKEN_R_PAREN (281) 15 56
TOKEN_L_BRACKET (282) 18
TOKEN_R_BRACKET (283) 18
TOKEN_L_BRACE (284) 11
TOKEN_R_BRACE (285) 11
TOKEN_POSTINC (286) 53
TOKEN_POSTDEC (287) 54
TOKEN_NEG (288) 50
TOKEN_NOT (289) 51
TOKEN_EXP (290) 48
TOKEN_MUL (291) 44
TOKEN_DIV (292) 45
TOKEN_MOD (293) 46
TOKEN_ADD (294) 41
TOKEN_SUB (295) 42
TOKEN_LESS (296) 35
TOKEN_LE (297) 37
TOKEN_GE (298) 38
TOKEN_GREATER (299) 39
TOKEN_EQUAL (300) 34
TOKEN_NEQUAL (301) 36
TOKEN_AND (302) 32
TOKEN_OR (303) 30
TOKEN_ASSIGN (304) 7 9 28
TOKEN_SEMICOLON (305) 4 5
TOKEN_COLON (306) 6 7 8 9 10 17
TOKEN_COMMA (307) 12 14
TOKEN_BACKSLASH (308)
TOKEN_C_COMMENT (309)
TOKEN_CPP_COMMENT (310)
TOKEN_ERROR (311)
TOKEN_EOF (312)


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
program (59)
    on left: 1, on right: 0
stmt_list (60)
    on left: 2 3, on right: 1 2
stmt (61)
    on left: 4 5, on right: 2 3
decl (62)
    on left: 6 7 8 9 10, on right: 4
brac_list (63)
    on left: 11 12 13, on right: 9 11 12
arg_list (64)
    on left: 14 15 16, on right: 10 14 15
arg (65)
    on left: 17, on right: 14 16
idx (66)
    on left: 18, on right: 8 9
type (67)
    on left: 19 20 21 22 23 24 25 26, on right: 6 7 8 9 10 17
id (68)
    on left: 27, on right: 6 7 8 9 10 17 28
expr (69)
    on left: 28 29, on right: 5 7 12 13 18 28 56
expr_or (70)
    on left: 30 31, on right: 29 30
expr_and (71)
    on left: 32 33, on right: 30 31 32
expr_comp (72)
    on left: 34 35 36 37 38 39 40, on right: 32 33 34 35 36 37 38 39
expr_add (73)
    on left: 41 42 43, on right: 34 35 36 37 38 39 40 41 42
expr_mul (74)
    on left: 44 45 46 47, on right: 41 42 43 44 45 46
expr_exp (75)
    on left: 48 49, on right: 44 45 46 47 48
expr_unary (76)
    on left: 50 51 52, on right: 48 49 50 51
exp_post (77)
    on left: 53 54 55, on right: 52
factor (78)
    on left: 56 57, on right: 53 54 55
literal (79)
    on left: 58 59 60 61 62 63, on right: 57


State 0

    0 $accept: . program $end

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_IDENTIFIER         shift, and go to state 7
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    program     go to state 11
    stmt_list   go to state 12
    stmt        go to state 13
    decl        go to state 14
    id          go to state 15
    expr        go to state 16
    expr_or     go to state 17
    expr_and    go to state 18
    expr_comp   go to state 19
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 1

   58 literal: TOKEN_INTEGER_LITERAL .

    $default  reduce using rule 58 (literal)


State 2

   60 literal: TOKEN_CHARACTER_LITERAL .

    $default  reduce using rule 60 (literal)


State 3

   61 literal: TOKEN_STRING_LITERAL .

    $default  reduce using rule 61 (literal)


State 4

   59 literal: TOKEN_FLOAT_LITERAL .

    $default  reduce using rule 59 (literal)


State 5

   63 literal: TOKEN_FALSE .

    $default  reduce using rule 63 (literal)


State 6

   62 literal: TOKEN_TRUE .

    $default  reduce using rule 62 (literal)


State 7

   27 id: TOKEN_IDENTIFIER .

    $default  reduce using rule 27 (id)


State 8

   56 factor: TOKEN_L_PAREN . expr TOKEN_R_PAREN

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_IDENTIFIER         shift, and go to state 7
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    id          go to state 27
    expr        go to state 28
    expr_or     go to state 17
    expr_and    go to state 18
    expr_comp   go to state 19
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 9

   50 expr_unary: TOKEN_NEG . expr_unary

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    expr_unary  go to state 29
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 10

   51 expr_unary: TOKEN_NOT . expr_unary

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    expr_unary  go to state 30
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 11

    0 $accept: program . $end

    $end  shift, and go to state 31


State 12

    1 program: stmt_list .

    $default  reduce using rule 1 (program)


State 13

    2 stmt_list: stmt . stmt_list
    3          | stmt .

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_IDENTIFIER         shift, and go to state 7
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    $default  reduce using rule 3 (stmt_list)

    stmt_list   go to state 32
    stmt        go to state 13
    decl        go to state 14
    id          go to state 15
    expr        go to state 16
    expr_or     go to state 17
    expr_and    go to state 18
    expr_comp   go to state 19
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 14

    4 stmt: decl . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 33


State 15

    6 decl: id . TOKEN_COLON type
    7     | id . TOKEN_COLON type TOKEN_ASSIGN expr
    8     | id . TOKEN_COLON type idx type
    9     | id . TOKEN_COLON type idx type TOKEN_ASSIGN brac_list
   10     | id . TOKEN_COLON TOKEN_FUNCTION type arg_list
   28 expr: id . TOKEN_ASSIGN expr

    TOKEN_ASSIGN  shift, and go to state 34
    TOKEN_COLON   shift, and go to state 35


State 16

    5 stmt: expr . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 36


State 17

   29 expr: expr_or .

    $default  reduce using rule 29 (expr)


State 18

   30 expr_or: expr_and . TOKEN_OR expr_or
   31        | expr_and .

    TOKEN_OR  shift, and go to state 37

    $default  reduce using rule 31 (expr_or)


State 19

   32 expr_and: expr_comp . TOKEN_AND expr_and
   33         | expr_comp .

    TOKEN_AND  shift, and go to state 38

    $default  reduce using rule 33 (expr_and)


State 20

   34 expr_comp: expr_add . TOKEN_EQUAL expr_comp
   35          | expr_add . TOKEN_LESS expr_comp
   36          | expr_add . TOKEN_NEQUAL expr_comp
   37          | expr_add . TOKEN_LE expr_comp
   38          | expr_add . TOKEN_GE expr_comp
   39          | expr_add . TOKEN_GREATER expr_comp
   40          | expr_add .

    TOKEN_LESS     shift, and go to state 39
    TOKEN_LE       shift, and go to state 40
    TOKEN_GE       shift, and go to state 41
    TOKEN_GREATER  shift, and go to state 42
    TOKEN_EQUAL    shift, and go to state 43
    TOKEN_NEQUAL   shift, and go to state 44

    $default  reduce using rule 40 (expr_comp)


State 21

   41 expr_add: expr_mul . TOKEN_ADD expr_add
   42         | expr_mul . TOKEN_SUB expr_add
   43         | expr_mul .

    TOKEN_ADD  shift, and go to state 45
    TOKEN_SUB  shift, and go to state 46

    $default  reduce using rule 43 (expr_add)


State 22

   44 expr_mul: expr_exp . TOKEN_MUL expr_mul
   45         | expr_exp . TOKEN_DIV expr_mul
   46         | expr_exp . TOKEN_MOD expr_mul
   47         | expr_exp .

    TOKEN_MUL  shift, and go to state 47
    TOKEN_DIV  shift, and go to state 48
    TOKEN_MOD  shift, and go to state 49

    $default  reduce using rule 47 (expr_mul)


State 23

   48 expr_exp: expr_unary . TOKEN_EXP expr_exp
   49         | expr_unary .

    TOKEN_EXP  shift, and go to state 50

    $default  reduce using rule 49 (expr_exp)


State 24

   52 expr_unary: exp_post .

    $default  reduce using rule 52 (expr_unary)


State 25

   53 exp_post: factor . TOKEN_POSTINC
   54         | factor . TOKEN_POSTDEC
   55         | factor .

    TOKEN_POSTINC  shift, and go to state 51
    TOKEN_POSTDEC  shift, and go to state 52

    $default  reduce using rule 55 (exp_post)


State 26

   57 factor: literal .

    $default  reduce using rule 57 (factor)


State 27

   28 expr: id . TOKEN_ASSIGN expr

    TOKEN_ASSIGN  shift, and go to state 34


State 28

   56 factor: TOKEN_L_PAREN expr . TOKEN_R_PAREN

    TOKEN_R_PAREN  shift, and go to state 53


State 29

   50 expr_unary: TOKEN_NEG expr_unary .

    $default  reduce using rule 50 (expr_unary)


State 30

   51 expr_unary: TOKEN_NOT expr_unary .

    $default  reduce using rule 51 (expr_unary)


State 31

    0 $accept: program $end .

    $default  accept


State 32

    2 stmt_list: stmt stmt_list .

    $default  reduce using rule 2 (stmt_list)


State 33

    4 stmt: decl TOKEN_SEMICOLON .

    $default  reduce using rule 4 (stmt)


State 34

   28 expr: id TOKEN_ASSIGN . expr

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_IDENTIFIER         shift, and go to state 7
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    id          go to state 27
    expr        go to state 54
    expr_or     go to state 17
    expr_and    go to state 18
    expr_comp   go to state 19
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 35

    6 decl: id TOKEN_COLON . type
    7     | id TOKEN_COLON . type TOKEN_ASSIGN expr
    8     | id TOKEN_COLON . type idx type
    9     | id TOKEN_COLON . type idx type TOKEN_ASSIGN brac_list
   10     | id TOKEN_COLON . TOKEN_FUNCTION type arg_list

    TOKEN_ARRAY      shift, and go to state 55
    TOKEN_BOOLEAN    shift, and go to state 56
    TOKEN_CHARACTER  shift, and go to state 57
    TOKEN_FLOAT      shift, and go to state 58
    TOKEN_FUNCTION   shift, and go to state 59
    TOKEN_INTEGER    shift, and go to state 60
    TOKEN_STRING     shift, and go to state 61
    TOKEN_VOID       shift, and go to state 62

    type  go to state 63


State 36

    5 stmt: expr TOKEN_SEMICOLON .

    $default  reduce using rule 5 (stmt)


State 37

   30 expr_or: expr_and TOKEN_OR . expr_or

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    expr_or     go to state 64
    expr_and    go to state 18
    expr_comp   go to state 19
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 38

   32 expr_and: expr_comp TOKEN_AND . expr_and

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    expr_and    go to state 65
    expr_comp   go to state 19
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 39

   35 expr_comp: expr_add TOKEN_LESS . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    expr_comp   go to state 66
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 40

   37 expr_comp: expr_add TOKEN_LE . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    expr_comp   go to state 67
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 41

   38 expr_comp: expr_add TOKEN_GE . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    expr_comp   go to state 68
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 42

   39 expr_comp: expr_add TOKEN_GREATER . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    expr_comp   go to state 69
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 43

   34 expr_comp: expr_add TOKEN_EQUAL . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    expr_comp   go to state 70
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 44

   36 expr_comp: expr_add TOKEN_NEQUAL . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    expr_comp   go to state 71
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 45

   41 expr_add: expr_mul TOKEN_ADD . expr_add

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    expr_add    go to state 72
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 46

   42 expr_add: expr_mul TOKEN_SUB . expr_add

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    expr_add    go to state 73
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 47

   44 expr_mul: expr_exp TOKEN_MUL . expr_mul

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    expr_mul    go to state 74
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 48

   45 expr_mul: expr_exp TOKEN_DIV . expr_mul

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    expr_mul    go to state 75
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 49

   46 expr_mul: expr_exp TOKEN_MOD . expr_mul

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    expr_mul    go to state 76
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 50

   48 expr_exp: expr_unary TOKEN_EXP . expr_exp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    expr_exp    go to state 77
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 51

   53 exp_post: factor TOKEN_POSTINC .

    $default  reduce using rule 53 (exp_post)


State 52

   54 exp_post: factor TOKEN_POSTDEC .

    $default  reduce using rule 54 (exp_post)


State 53

   56 factor: TOKEN_L_PAREN expr TOKEN_R_PAREN .

    $default  reduce using rule 56 (factor)


State 54

   28 expr: id TOKEN_ASSIGN expr .

    $default  reduce using rule 28 (expr)


State 55

   25 type: TOKEN_ARRAY .

    $default  reduce using rule 25 (type)


State 56

   21 type: TOKEN_BOOLEAN .

    $default  reduce using rule 21 (type)


State 57

   22 type: TOKEN_CHARACTER .

    $default  reduce using rule 22 (type)


State 58

   20 type: TOKEN_FLOAT .

    $default  reduce using rule 20 (type)


State 59

   10 decl: id TOKEN_COLON TOKEN_FUNCTION . type arg_list
   26 type: TOKEN_FUNCTION .

    TOKEN_ARRAY      shift, and go to state 55
    TOKEN_BOOLEAN    shift, and go to state 56
    TOKEN_CHARACTER  shift, and go to state 57
    TOKEN_FLOAT      shift, and go to state 58
    TOKEN_FUNCTION   shift, and go to state 78
    TOKEN_INTEGER    shift, and go to state 60
    TOKEN_STRING     shift, and go to state 61
    TOKEN_VOID       shift, and go to state 62

    $default  reduce using rule 26 (type)

    type  go to state 79


State 60

   19 type: TOKEN_INTEGER .

    $default  reduce using rule 19 (type)


State 61

   23 type: TOKEN_STRING .

    $default  reduce using rule 23 (type)


State 62

   24 type: TOKEN_VOID .

    $default  reduce using rule 24 (type)


State 63

    6 decl: id TOKEN_COLON type .
    7     | id TOKEN_COLON type . TOKEN_ASSIGN expr
    8     | id TOKEN_COLON type . idx type
    9     | id TOKEN_COLON type . idx type TOKEN_ASSIGN brac_list

    TOKEN_L_BRACKET  shift, and go to state 80
    TOKEN_ASSIGN     shift, and go to state 81

    $default  reduce using rule 6 (decl)

    idx  go to state 82


State 64

   30 expr_or: expr_and TOKEN_OR expr_or .

    $default  reduce using rule 30 (expr_or)


State 65

   32 expr_and: expr_comp TOKEN_AND expr_and .

    $default  reduce using rule 32 (expr_and)


State 66

   35 expr_comp: expr_add TOKEN_LESS expr_comp .

    $default  reduce using rule 35 (expr_comp)


State 67

   37 expr_comp: expr_add TOKEN_LE expr_comp .

    $default  reduce using rule 37 (expr_comp)


State 68

   38 expr_comp: expr_add TOKEN_GE expr_comp .

    $default  reduce using rule 38 (expr_comp)


State 69

   39 expr_comp: expr_add TOKEN_GREATER expr_comp .

    $default  reduce using rule 39 (expr_comp)


State 70

   34 expr_comp: expr_add TOKEN_EQUAL expr_comp .

    $default  reduce using rule 34 (expr_comp)


State 71

   36 expr_comp: expr_add TOKEN_NEQUAL expr_comp .

    $default  reduce using rule 36 (expr_comp)


State 72

   41 expr_add: expr_mul TOKEN_ADD expr_add .

    $default  reduce using rule 41 (expr_add)


State 73

   42 expr_add: expr_mul TOKEN_SUB expr_add .

    $default  reduce using rule 42 (expr_add)


State 74

   44 expr_mul: expr_exp TOKEN_MUL expr_mul .

    $default  reduce using rule 44 (expr_mul)


State 75

   45 expr_mul: expr_exp TOKEN_DIV expr_mul .

    $default  reduce using rule 45 (expr_mul)


State 76

   46 expr_mul: expr_exp TOKEN_MOD expr_mul .

    $default  reduce using rule 46 (expr_mul)


State 77

   48 expr_exp: expr_unary TOKEN_EXP expr_exp .

    $default  reduce using rule 48 (expr_exp)


State 78

   26 type: TOKEN_FUNCTION .

    $default  reduce using rule 26 (type)


State 79

   10 decl: id TOKEN_COLON TOKEN_FUNCTION type . arg_list

    TOKEN_IDENTIFIER  shift, and go to state 7
    TOKEN_L_PAREN     shift, and go to state 83

    arg_list  go to state 84
    arg       go to state 85
    id        go to state 86


State 80

   18 idx: TOKEN_L_BRACKET . expr TOKEN_R_BRACKET

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_IDENTIFIER         shift, and go to state 7
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    id          go to state 27
    expr        go to state 87
    expr_or     go to state 17
    expr_and    go to state 18
    expr_comp   go to state 19
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 81

    7 decl: id TOKEN_COLON type TOKEN_ASSIGN . expr

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_IDENTIFIER         shift, and go to state 7
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    id          go to state 27
    expr        go to state 88
    expr_or     go to state 17
    expr_and    go to state 18
    expr_comp   go to state 19
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 82

    8 decl: id TOKEN_COLON type idx . type
    9     | id TOKEN_COLON type idx . type TOKEN_ASSIGN brac_list

    TOKEN_ARRAY      shift, and go to state 55
    TOKEN_BOOLEAN    shift, and go to state 56
    TOKEN_CHARACTER  shift, and go to state 57
    TOKEN_FLOAT      shift, and go to state 58
    TOKEN_FUNCTION   shift, and go to state 78
    TOKEN_INTEGER    shift, and go to state 60
    TOKEN_STRING     shift, and go to state 61
    TOKEN_VOID       shift, and go to state 62

    type  go to state 89


State 83

   15 arg_list: TOKEN_L_PAREN . arg_list TOKEN_R_PAREN

    TOKEN_IDENTIFIER  shift, and go to state 7
    TOKEN_L_PAREN     shift, and go to state 83

    arg_list  go to state 90
    arg       go to state 85
    id        go to state 86


State 84

   10 decl: id TOKEN_COLON TOKEN_FUNCTION type arg_list .

    $default  reduce using rule 10 (decl)


State 85

   14 arg_list: arg . TOKEN_COMMA arg_list
   16         | arg .

    TOKEN_COMMA  shift, and go to state 91

    $default  reduce using rule 16 (arg_list)


State 86

   17 arg: id . TOKEN_COLON type

    TOKEN_COLON  shift, and go to state 92


State 87

   18 idx: TOKEN_L_BRACKET expr . TOKEN_R_BRACKET

    TOKEN_R_BRACKET  shift, and go to state 93


State 88

    7 decl: id TOKEN_COLON type TOKEN_ASSIGN expr .

    $default  reduce using rule 7 (decl)


State 89

    8 decl: id TOKEN_COLON type idx type .
    9     | id TOKEN_COLON type idx type . TOKEN_ASSIGN brac_list

    TOKEN_ASSIGN  shift, and go to state 94

    $default  reduce using rule 8 (decl)


State 90

   15 arg_list: TOKEN_L_PAREN arg_list . TOKEN_R_PAREN

    TOKEN_R_PAREN  shift, and go to state 95


State 91

   14 arg_list: arg TOKEN_COMMA . arg_list

    TOKEN_IDENTIFIER  shift, and go to state 7
    TOKEN_L_PAREN     shift, and go to state 83

    arg_list  go to state 96
    arg       go to state 85
    id        go to state 86


State 92

   17 arg: id TOKEN_COLON . type

    TOKEN_ARRAY      shift, and go to state 55
    TOKEN_BOOLEAN    shift, and go to state 56
    TOKEN_CHARACTER  shift, and go to state 57
    TOKEN_FLOAT      shift, and go to state 58
    TOKEN_FUNCTION   shift, and go to state 78
    TOKEN_INTEGER    shift, and go to state 60
    TOKEN_STRING     shift, and go to state 61
    TOKEN_VOID       shift, and go to state 62

    type  go to state 97


State 93

   18 idx: TOKEN_L_BRACKET expr TOKEN_R_BRACKET .

    $default  reduce using rule 18 (idx)


State 94

    9 decl: id TOKEN_COLON type idx type TOKEN_ASSIGN . brac_list

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_IDENTIFIER         shift, and go to state 7
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_L_BRACE            shift, and go to state 98
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    brac_list   go to state 99
    id          go to state 27
    expr        go to state 100
    expr_or     go to state 17
    expr_and    go to state 18
    expr_comp   go to state 19
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 95

   15 arg_list: TOKEN_L_PAREN arg_list TOKEN_R_PAREN .

    $default  reduce using rule 15 (arg_list)


State 96

   14 arg_list: arg TOKEN_COMMA arg_list .

    $default  reduce using rule 14 (arg_list)


State 97

   17 arg: id TOKEN_COLON type .

    $default  reduce using rule 17 (arg)


State 98

   11 brac_list: TOKEN_L_BRACE . brac_list TOKEN_R_BRACE

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_IDENTIFIER         shift, and go to state 7
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_L_BRACE            shift, and go to state 98
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    brac_list   go to state 101
    id          go to state 27
    expr        go to state 100
    expr_or     go to state 17
    expr_and    go to state 18
    expr_comp   go to state 19
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 99

    9 decl: id TOKEN_COLON type idx type TOKEN_ASSIGN brac_list .

    $default  reduce using rule 9 (decl)


State 100

   12 brac_list: expr . TOKEN_COMMA brac_list
   13          | expr .

    TOKEN_COMMA  shift, and go to state 102

    $default  reduce using rule 13 (brac_list)


State 101

   11 brac_list: TOKEN_L_BRACE brac_list . TOKEN_R_BRACE

    TOKEN_R_BRACE  shift, and go to state 103


State 102

   12 brac_list: expr TOKEN_COMMA . brac_list

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 6
    TOKEN_IDENTIFIER         shift, and go to state 7
    TOKEN_L_PAREN            shift, and go to state 8
    TOKEN_L_BRACE            shift, and go to state 98
    TOKEN_NEG                shift, and go to state 9
    TOKEN_NOT                shift, and go to state 10

    brac_list   go to state 104
    id          go to state 27
    expr        go to state 100
    expr_or     go to state 17
    expr_and    go to state 18
    expr_comp   go to state 19
    expr_add    go to state 20
    expr_mul    go to state 21
    expr_exp    go to state 22
    expr_unary  go to state 23
    exp_post    go to state 24
    factor      go to state 25
    literal     go to state 26


State 103

   11 brac_list: TOKEN_L_BRACE brac_list TOKEN_R_BRACE .

    $default  reduce using rule 11 (brac_list)


State 104

   12 brac_list: expr TOKEN_COMMA brac_list .

    $default  reduce using rule 12 (brac_list)
