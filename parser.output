Terminals unused in grammar

   TOKEN_FOR
   TOKEN_PRINT
   TOKEN_RETURN
   TOKEN_WHILE
   TOKEN_AUTO
   TOKEN_BACKSLASH
   TOKEN_C_COMMENT
   TOKEN_CPP_COMMENT
   TOKEN_ERROR
   TOKEN_EOF


Grammar

    0 $accept: program $end

    1 program: stmt_list

    2 stmt_list: stmt stmt_list
    3          | stmt

    4 stmt: decl TOKEN_SEMICOLON
    5     | expr TOKEN_SEMICOLON
    6     | TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN stmt
    7     | TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE stmt
    8     | TOKEN_L_BRACE stmt_list TOKEN_R_BRACE

    9 if_nest: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE if_nest
   10        | decl TOKEN_SEMICOLON
   11        | expr TOKEN_SEMICOLON
   12        | TOKEN_L_BRACE stmt_list TOKEN_R_BRACE

   13 decl: id TOKEN_COLON type
   14     | id TOKEN_COLON type TOKEN_ASSIGN expr
   15     | id TOKEN_COLON type idx type
   16     | id TOKEN_COLON type idx type TOKEN_ASSIGN brac_list
   17     | id TOKEN_COLON TOKEN_FUNCTION type arg_list

   18 brac_list: TOKEN_L_BRACE brac_list TOKEN_R_BRACE
   19          | expr TOKEN_COMMA brac_list
   20          | expr

   21 arg_list: arg TOKEN_COMMA arg_list
   22         | TOKEN_L_PAREN arg_list TOKEN_R_PAREN
   23         | arg

   24 arg: id TOKEN_COLON type

   25 idx: TOKEN_L_BRACKET expr TOKEN_R_BRACKET

   26 type: TOKEN_INTEGER
   27     | TOKEN_FLOAT
   28     | TOKEN_BOOLEAN
   29     | TOKEN_CHARACTER
   30     | TOKEN_STRING
   31     | TOKEN_VOID
   32     | TOKEN_ARRAY
   33     | TOKEN_FUNCTION

   34 id: TOKEN_IDENTIFIER

   35 expr: id TOKEN_ASSIGN expr
   36     | expr_or

   37 expr_or: expr_and TOKEN_OR expr_or
   38        | expr_and

   39 expr_and: expr_comp TOKEN_AND expr_and
   40         | expr_comp

   41 expr_comp: expr_add TOKEN_EQUAL expr_comp
   42          | expr_add TOKEN_LESS expr_comp
   43          | expr_add TOKEN_NEQUAL expr_comp
   44          | expr_add TOKEN_LE expr_comp
   45          | expr_add TOKEN_GE expr_comp
   46          | expr_add TOKEN_GREATER expr_comp
   47          | expr_add

   48 expr_add: expr_mul TOKEN_ADD expr_add
   49         | expr_mul TOKEN_SUB expr_add
   50         | expr_mul

   51 expr_mul: expr_exp TOKEN_MUL expr_mul
   52         | expr_exp TOKEN_DIV expr_mul
   53         | expr_exp TOKEN_MOD expr_mul
   54         | expr_exp

   55 expr_exp: expr_unary TOKEN_EXP expr_exp
   56         | expr_unary

   57 expr_unary: TOKEN_NEG expr_unary
   58           | TOKEN_NOT expr_unary
   59           | exp_post

   60 exp_post: factor TOKEN_POSTINC
   61         | factor TOKEN_POSTDEC
   62         | factor

   63 factor: TOKEN_L_PAREN expr TOKEN_R_PAREN
   64       | literal
   65       | id

   66 literal: TOKEN_INTEGER_LITERAL
   67        | TOKEN_FLOAT_LITERAL
   68        | TOKEN_CHARACTER_LITERAL
   69        | TOKEN_STRING_LITERAL
   70        | TOKEN_TRUE
   71        | TOKEN_FALSE


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKEN_ARRAY (258) 32
TOKEN_BOOLEAN (259) 28
TOKEN_CHARACTER (260) 29
TOKEN_FLOAT (261) 27
TOKEN_FUNCTION (262) 17 33
TOKEN_INTEGER (263) 26
TOKEN_STRING (264) 30
TOKEN_VOID (265) 31
TOKEN_INTEGER_LITERAL (266) 66
TOKEN_CHARACTER_LITERAL (267) 68
TOKEN_STRING_LITERAL (268) 69
TOKEN_FLOAT_LITERAL (269) 67
TOKEN_ELSE (270) 7 9
TOKEN_FALSE (271) 71
TOKEN_FOR (272)
TOKEN_IF (273) 6 7 9
TOKEN_PRINT (274)
TOKEN_RETURN (275)
TOKEN_TRUE (276) 70
TOKEN_WHILE (277)
TOKEN_AUTO (278)
TOKEN_IDENTIFIER (279) 34
TOKEN_L_PAREN (280) 6 7 9 22 63
TOKEN_R_PAREN (281) 6 7 9 22 63
TOKEN_L_BRACKET (282) 25
TOKEN_R_BRACKET (283) 25
TOKEN_L_BRACE (284) 8 12 18
TOKEN_R_BRACE (285) 8 12 18
TOKEN_POSTINC (286) 60
TOKEN_POSTDEC (287) 61
TOKEN_NEG (288) 57
TOKEN_NOT (289) 58
TOKEN_EXP (290) 55
TOKEN_MUL (291) 51
TOKEN_DIV (292) 52
TOKEN_MOD (293) 53
TOKEN_ADD (294) 48
TOKEN_SUB (295) 49
TOKEN_LESS (296) 42
TOKEN_LE (297) 44
TOKEN_GE (298) 45
TOKEN_GREATER (299) 46
TOKEN_EQUAL (300) 41
TOKEN_NEQUAL (301) 43
TOKEN_AND (302) 39
TOKEN_OR (303) 37
TOKEN_ASSIGN (304) 14 16 35
TOKEN_SEMICOLON (305) 4 5 10 11
TOKEN_COLON (306) 13 14 15 16 17 24
TOKEN_COMMA (307) 19 21
TOKEN_BACKSLASH (308)
TOKEN_C_COMMENT (309)
TOKEN_CPP_COMMENT (310)
TOKEN_ERROR (311)
TOKEN_EOF (312)


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
program (59)
    on left: 1, on right: 0
stmt_list (60)
    on left: 2 3, on right: 1 2 8 12
stmt (61)
    on left: 4 5 6 7 8, on right: 2 3 6 7
if_nest (62)
    on left: 9 10 11 12, on right: 7 9
decl (63)
    on left: 13 14 15 16 17, on right: 4 10
brac_list (64)
    on left: 18 19 20, on right: 16 18 19
arg_list (65)
    on left: 21 22 23, on right: 17 21 22
arg (66)
    on left: 24, on right: 21 23
idx (67)
    on left: 25, on right: 15 16
type (68)
    on left: 26 27 28 29 30 31 32 33, on right: 13 14 15 16 17 24
id (69)
    on left: 34, on right: 13 14 15 16 17 24 35 65
expr (70)
    on left: 35 36, on right: 5 6 7 9 11 14 19 20 25 35 63
expr_or (71)
    on left: 37 38, on right: 36 37
expr_and (72)
    on left: 39 40, on right: 37 38 39
expr_comp (73)
    on left: 41 42 43 44 45 46 47, on right: 39 40 41 42 43 44 45 46
expr_add (74)
    on left: 48 49 50, on right: 41 42 43 44 45 46 47 48 49
expr_mul (75)
    on left: 51 52 53 54, on right: 48 49 50 51 52 53
expr_exp (76)
    on left: 55 56, on right: 51 52 53 54 55
expr_unary (77)
    on left: 57 58 59, on right: 55 56 57 58
exp_post (78)
    on left: 60 61 62, on right: 59
factor (79)
    on left: 63 64 65, on right: 60 61 62
literal (80)
    on left: 66 67 68 69 70 71, on right: 64


State 0

    0 $accept: . program $end

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_IF                 shift, and go to state 6
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_L_BRACE            shift, and go to state 10
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    program     go to state 13
    stmt_list   go to state 14
    stmt        go to state 15
    decl        go to state 16
    id          go to state 17
    expr        go to state 18
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 1

   66 literal: TOKEN_INTEGER_LITERAL .

    $default  reduce using rule 66 (literal)


State 2

   68 literal: TOKEN_CHARACTER_LITERAL .

    $default  reduce using rule 68 (literal)


State 3

   69 literal: TOKEN_STRING_LITERAL .

    $default  reduce using rule 69 (literal)


State 4

   67 literal: TOKEN_FLOAT_LITERAL .

    $default  reduce using rule 67 (literal)


State 5

   71 literal: TOKEN_FALSE .

    $default  reduce using rule 71 (literal)


State 6

    6 stmt: TOKEN_IF . TOKEN_L_PAREN expr TOKEN_R_PAREN stmt
    7     | TOKEN_IF . TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE stmt

    TOKEN_L_PAREN  shift, and go to state 29


State 7

   70 literal: TOKEN_TRUE .

    $default  reduce using rule 70 (literal)


State 8

   34 id: TOKEN_IDENTIFIER .

    $default  reduce using rule 34 (id)


State 9

   63 factor: TOKEN_L_PAREN . expr TOKEN_R_PAREN

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 30
    expr        go to state 31
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 10

    8 stmt: TOKEN_L_BRACE . stmt_list TOKEN_R_BRACE

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_IF                 shift, and go to state 6
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_L_BRACE            shift, and go to state 10
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    stmt_list   go to state 32
    stmt        go to state 15
    decl        go to state 16
    id          go to state 17
    expr        go to state 18
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 11

   57 expr_unary: TOKEN_NEG . expr_unary

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 33
    expr_unary  go to state 34
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 12

   58 expr_unary: TOKEN_NOT . expr_unary

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 33
    expr_unary  go to state 35
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 13

    0 $accept: program . $end

    $end  shift, and go to state 36


State 14

    1 program: stmt_list .

    $default  reduce using rule 1 (program)


State 15

    2 stmt_list: stmt . stmt_list
    3          | stmt .

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_IF                 shift, and go to state 6
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_L_BRACE            shift, and go to state 10
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    $default  reduce using rule 3 (stmt_list)

    stmt_list   go to state 37
    stmt        go to state 15
    decl        go to state 16
    id          go to state 17
    expr        go to state 18
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 16

    4 stmt: decl . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 38


State 17

   13 decl: id . TOKEN_COLON type
   14     | id . TOKEN_COLON type TOKEN_ASSIGN expr
   15     | id . TOKEN_COLON type idx type
   16     | id . TOKEN_COLON type idx type TOKEN_ASSIGN brac_list
   17     | id . TOKEN_COLON TOKEN_FUNCTION type arg_list
   35 expr: id . TOKEN_ASSIGN expr
   65 factor: id .

    TOKEN_ASSIGN  shift, and go to state 39
    TOKEN_COLON   shift, and go to state 40

    $default  reduce using rule 65 (factor)


State 18

    5 stmt: expr . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 41


State 19

   36 expr: expr_or .

    $default  reduce using rule 36 (expr)


State 20

   37 expr_or: expr_and . TOKEN_OR expr_or
   38        | expr_and .

    TOKEN_OR  shift, and go to state 42

    $default  reduce using rule 38 (expr_or)


State 21

   39 expr_and: expr_comp . TOKEN_AND expr_and
   40         | expr_comp .

    TOKEN_AND  shift, and go to state 43

    $default  reduce using rule 40 (expr_and)


State 22

   41 expr_comp: expr_add . TOKEN_EQUAL expr_comp
   42          | expr_add . TOKEN_LESS expr_comp
   43          | expr_add . TOKEN_NEQUAL expr_comp
   44          | expr_add . TOKEN_LE expr_comp
   45          | expr_add . TOKEN_GE expr_comp
   46          | expr_add . TOKEN_GREATER expr_comp
   47          | expr_add .

    TOKEN_LESS     shift, and go to state 44
    TOKEN_LE       shift, and go to state 45
    TOKEN_GE       shift, and go to state 46
    TOKEN_GREATER  shift, and go to state 47
    TOKEN_EQUAL    shift, and go to state 48
    TOKEN_NEQUAL   shift, and go to state 49

    $default  reduce using rule 47 (expr_comp)


State 23

   48 expr_add: expr_mul . TOKEN_ADD expr_add
   49         | expr_mul . TOKEN_SUB expr_add
   50         | expr_mul .

    TOKEN_ADD  shift, and go to state 50
    TOKEN_SUB  shift, and go to state 51

    $default  reduce using rule 50 (expr_add)


State 24

   51 expr_mul: expr_exp . TOKEN_MUL expr_mul
   52         | expr_exp . TOKEN_DIV expr_mul
   53         | expr_exp . TOKEN_MOD expr_mul
   54         | expr_exp .

    TOKEN_MUL  shift, and go to state 52
    TOKEN_DIV  shift, and go to state 53
    TOKEN_MOD  shift, and go to state 54

    $default  reduce using rule 54 (expr_mul)


State 25

   55 expr_exp: expr_unary . TOKEN_EXP expr_exp
   56         | expr_unary .

    TOKEN_EXP  shift, and go to state 55

    $default  reduce using rule 56 (expr_exp)


State 26

   59 expr_unary: exp_post .

    $default  reduce using rule 59 (expr_unary)


State 27

   60 exp_post: factor . TOKEN_POSTINC
   61         | factor . TOKEN_POSTDEC
   62         | factor .

    TOKEN_POSTINC  shift, and go to state 56
    TOKEN_POSTDEC  shift, and go to state 57

    $default  reduce using rule 62 (exp_post)


State 28

   64 factor: literal .

    $default  reduce using rule 64 (factor)


State 29

    6 stmt: TOKEN_IF TOKEN_L_PAREN . expr TOKEN_R_PAREN stmt
    7     | TOKEN_IF TOKEN_L_PAREN . expr TOKEN_R_PAREN if_nest TOKEN_ELSE stmt

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 30
    expr        go to state 58
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 30

   35 expr: id . TOKEN_ASSIGN expr
   65 factor: id .

    TOKEN_ASSIGN  shift, and go to state 39

    $default  reduce using rule 65 (factor)


State 31

   63 factor: TOKEN_L_PAREN expr . TOKEN_R_PAREN

    TOKEN_R_PAREN  shift, and go to state 59


State 32

    8 stmt: TOKEN_L_BRACE stmt_list . TOKEN_R_BRACE

    TOKEN_R_BRACE  shift, and go to state 60


State 33

   65 factor: id .

    $default  reduce using rule 65 (factor)


State 34

   57 expr_unary: TOKEN_NEG expr_unary .

    $default  reduce using rule 57 (expr_unary)


State 35

   58 expr_unary: TOKEN_NOT expr_unary .

    $default  reduce using rule 58 (expr_unary)


State 36

    0 $accept: program $end .

    $default  accept


State 37

    2 stmt_list: stmt stmt_list .

    $default  reduce using rule 2 (stmt_list)


State 38

    4 stmt: decl TOKEN_SEMICOLON .

    $default  reduce using rule 4 (stmt)


State 39

   35 expr: id TOKEN_ASSIGN . expr

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 30
    expr        go to state 61
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 40

   13 decl: id TOKEN_COLON . type
   14     | id TOKEN_COLON . type TOKEN_ASSIGN expr
   15     | id TOKEN_COLON . type idx type
   16     | id TOKEN_COLON . type idx type TOKEN_ASSIGN brac_list
   17     | id TOKEN_COLON . TOKEN_FUNCTION type arg_list

    TOKEN_ARRAY      shift, and go to state 62
    TOKEN_BOOLEAN    shift, and go to state 63
    TOKEN_CHARACTER  shift, and go to state 64
    TOKEN_FLOAT      shift, and go to state 65
    TOKEN_FUNCTION   shift, and go to state 66
    TOKEN_INTEGER    shift, and go to state 67
    TOKEN_STRING     shift, and go to state 68
    TOKEN_VOID       shift, and go to state 69

    type  go to state 70


State 41

    5 stmt: expr TOKEN_SEMICOLON .

    $default  reduce using rule 5 (stmt)


State 42

   37 expr_or: expr_and TOKEN_OR . expr_or

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 33
    expr_or     go to state 71
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 43

   39 expr_and: expr_comp TOKEN_AND . expr_and

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 33
    expr_and    go to state 72
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 44

   42 expr_comp: expr_add TOKEN_LESS . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 33
    expr_comp   go to state 73
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 45

   44 expr_comp: expr_add TOKEN_LE . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 33
    expr_comp   go to state 74
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 46

   45 expr_comp: expr_add TOKEN_GE . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 33
    expr_comp   go to state 75
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 47

   46 expr_comp: expr_add TOKEN_GREATER . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 33
    expr_comp   go to state 76
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 48

   41 expr_comp: expr_add TOKEN_EQUAL . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 33
    expr_comp   go to state 77
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 49

   43 expr_comp: expr_add TOKEN_NEQUAL . expr_comp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 33
    expr_comp   go to state 78
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 50

   48 expr_add: expr_mul TOKEN_ADD . expr_add

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 33
    expr_add    go to state 79
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 51

   49 expr_add: expr_mul TOKEN_SUB . expr_add

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 33
    expr_add    go to state 80
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 52

   51 expr_mul: expr_exp TOKEN_MUL . expr_mul

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 33
    expr_mul    go to state 81
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 53

   52 expr_mul: expr_exp TOKEN_DIV . expr_mul

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 33
    expr_mul    go to state 82
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 54

   53 expr_mul: expr_exp TOKEN_MOD . expr_mul

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 33
    expr_mul    go to state 83
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 55

   55 expr_exp: expr_unary TOKEN_EXP . expr_exp

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 33
    expr_exp    go to state 84
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 56

   60 exp_post: factor TOKEN_POSTINC .

    $default  reduce using rule 60 (exp_post)


State 57

   61 exp_post: factor TOKEN_POSTDEC .

    $default  reduce using rule 61 (exp_post)


State 58

    6 stmt: TOKEN_IF TOKEN_L_PAREN expr . TOKEN_R_PAREN stmt
    7     | TOKEN_IF TOKEN_L_PAREN expr . TOKEN_R_PAREN if_nest TOKEN_ELSE stmt

    TOKEN_R_PAREN  shift, and go to state 85


State 59

   63 factor: TOKEN_L_PAREN expr TOKEN_R_PAREN .

    $default  reduce using rule 63 (factor)


State 60

    8 stmt: TOKEN_L_BRACE stmt_list TOKEN_R_BRACE .

    $default  reduce using rule 8 (stmt)


State 61

   35 expr: id TOKEN_ASSIGN expr .

    $default  reduce using rule 35 (expr)


State 62

   32 type: TOKEN_ARRAY .

    $default  reduce using rule 32 (type)


State 63

   28 type: TOKEN_BOOLEAN .

    $default  reduce using rule 28 (type)


State 64

   29 type: TOKEN_CHARACTER .

    $default  reduce using rule 29 (type)


State 65

   27 type: TOKEN_FLOAT .

    $default  reduce using rule 27 (type)


State 66

   17 decl: id TOKEN_COLON TOKEN_FUNCTION . type arg_list
   33 type: TOKEN_FUNCTION .

    TOKEN_ARRAY      shift, and go to state 62
    TOKEN_BOOLEAN    shift, and go to state 63
    TOKEN_CHARACTER  shift, and go to state 64
    TOKEN_FLOAT      shift, and go to state 65
    TOKEN_FUNCTION   shift, and go to state 86
    TOKEN_INTEGER    shift, and go to state 67
    TOKEN_STRING     shift, and go to state 68
    TOKEN_VOID       shift, and go to state 69

    $default  reduce using rule 33 (type)

    type  go to state 87


State 67

   26 type: TOKEN_INTEGER .

    $default  reduce using rule 26 (type)


State 68

   30 type: TOKEN_STRING .

    $default  reduce using rule 30 (type)


State 69

   31 type: TOKEN_VOID .

    $default  reduce using rule 31 (type)


State 70

   13 decl: id TOKEN_COLON type .
   14     | id TOKEN_COLON type . TOKEN_ASSIGN expr
   15     | id TOKEN_COLON type . idx type
   16     | id TOKEN_COLON type . idx type TOKEN_ASSIGN brac_list

    TOKEN_L_BRACKET  shift, and go to state 88
    TOKEN_ASSIGN     shift, and go to state 89

    $default  reduce using rule 13 (decl)

    idx  go to state 90


State 71

   37 expr_or: expr_and TOKEN_OR expr_or .

    $default  reduce using rule 37 (expr_or)


State 72

   39 expr_and: expr_comp TOKEN_AND expr_and .

    $default  reduce using rule 39 (expr_and)


State 73

   42 expr_comp: expr_add TOKEN_LESS expr_comp .

    $default  reduce using rule 42 (expr_comp)


State 74

   44 expr_comp: expr_add TOKEN_LE expr_comp .

    $default  reduce using rule 44 (expr_comp)


State 75

   45 expr_comp: expr_add TOKEN_GE expr_comp .

    $default  reduce using rule 45 (expr_comp)


State 76

   46 expr_comp: expr_add TOKEN_GREATER expr_comp .

    $default  reduce using rule 46 (expr_comp)


State 77

   41 expr_comp: expr_add TOKEN_EQUAL expr_comp .

    $default  reduce using rule 41 (expr_comp)


State 78

   43 expr_comp: expr_add TOKEN_NEQUAL expr_comp .

    $default  reduce using rule 43 (expr_comp)


State 79

   48 expr_add: expr_mul TOKEN_ADD expr_add .

    $default  reduce using rule 48 (expr_add)


State 80

   49 expr_add: expr_mul TOKEN_SUB expr_add .

    $default  reduce using rule 49 (expr_add)


State 81

   51 expr_mul: expr_exp TOKEN_MUL expr_mul .

    $default  reduce using rule 51 (expr_mul)


State 82

   52 expr_mul: expr_exp TOKEN_DIV expr_mul .

    $default  reduce using rule 52 (expr_mul)


State 83

   53 expr_mul: expr_exp TOKEN_MOD expr_mul .

    $default  reduce using rule 53 (expr_mul)


State 84

   55 expr_exp: expr_unary TOKEN_EXP expr_exp .

    $default  reduce using rule 55 (expr_exp)


State 85

    6 stmt: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN . stmt
    7     | TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN . if_nest TOKEN_ELSE stmt

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_IF                 shift, and go to state 91
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_L_BRACE            shift, and go to state 92
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    stmt        go to state 93
    if_nest     go to state 94
    decl        go to state 95
    id          go to state 17
    expr        go to state 96
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 86

   33 type: TOKEN_FUNCTION .

    $default  reduce using rule 33 (type)


State 87

   17 decl: id TOKEN_COLON TOKEN_FUNCTION type . arg_list

    TOKEN_IDENTIFIER  shift, and go to state 8
    TOKEN_L_PAREN     shift, and go to state 97

    arg_list  go to state 98
    arg       go to state 99
    id        go to state 100


State 88

   25 idx: TOKEN_L_BRACKET . expr TOKEN_R_BRACKET

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 30
    expr        go to state 101
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 89

   14 decl: id TOKEN_COLON type TOKEN_ASSIGN . expr

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 30
    expr        go to state 102
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 90

   15 decl: id TOKEN_COLON type idx . type
   16     | id TOKEN_COLON type idx . type TOKEN_ASSIGN brac_list

    TOKEN_ARRAY      shift, and go to state 62
    TOKEN_BOOLEAN    shift, and go to state 63
    TOKEN_CHARACTER  shift, and go to state 64
    TOKEN_FLOAT      shift, and go to state 65
    TOKEN_FUNCTION   shift, and go to state 86
    TOKEN_INTEGER    shift, and go to state 67
    TOKEN_STRING     shift, and go to state 68
    TOKEN_VOID       shift, and go to state 69

    type  go to state 103


State 91

    6 stmt: TOKEN_IF . TOKEN_L_PAREN expr TOKEN_R_PAREN stmt
    7     | TOKEN_IF . TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE stmt
    9 if_nest: TOKEN_IF . TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE if_nest

    TOKEN_L_PAREN  shift, and go to state 104


State 92

    8 stmt: TOKEN_L_BRACE . stmt_list TOKEN_R_BRACE
   12 if_nest: TOKEN_L_BRACE . stmt_list TOKEN_R_BRACE

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_IF                 shift, and go to state 6
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_L_BRACE            shift, and go to state 10
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    stmt_list   go to state 105
    stmt        go to state 15
    decl        go to state 16
    id          go to state 17
    expr        go to state 18
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 93

    6 stmt: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN stmt .

    $default  reduce using rule 6 (stmt)


State 94

    7 stmt: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest . TOKEN_ELSE stmt

    TOKEN_ELSE  shift, and go to state 106


State 95

    4 stmt: decl . TOKEN_SEMICOLON
   10 if_nest: decl . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 107


State 96

    5 stmt: expr . TOKEN_SEMICOLON
   11 if_nest: expr . TOKEN_SEMICOLON

    TOKEN_SEMICOLON  shift, and go to state 108


State 97

   22 arg_list: TOKEN_L_PAREN . arg_list TOKEN_R_PAREN

    TOKEN_IDENTIFIER  shift, and go to state 8
    TOKEN_L_PAREN     shift, and go to state 97

    arg_list  go to state 109
    arg       go to state 99
    id        go to state 100


State 98

   17 decl: id TOKEN_COLON TOKEN_FUNCTION type arg_list .

    $default  reduce using rule 17 (decl)


State 99

   21 arg_list: arg . TOKEN_COMMA arg_list
   23         | arg .

    TOKEN_COMMA  shift, and go to state 110

    $default  reduce using rule 23 (arg_list)


State 100

   24 arg: id . TOKEN_COLON type

    TOKEN_COLON  shift, and go to state 111


State 101

   25 idx: TOKEN_L_BRACKET expr . TOKEN_R_BRACKET

    TOKEN_R_BRACKET  shift, and go to state 112


State 102

   14 decl: id TOKEN_COLON type TOKEN_ASSIGN expr .

    $default  reduce using rule 14 (decl)


State 103

   15 decl: id TOKEN_COLON type idx type .
   16     | id TOKEN_COLON type idx type . TOKEN_ASSIGN brac_list

    TOKEN_ASSIGN  shift, and go to state 113

    $default  reduce using rule 15 (decl)


State 104

    6 stmt: TOKEN_IF TOKEN_L_PAREN . expr TOKEN_R_PAREN stmt
    7     | TOKEN_IF TOKEN_L_PAREN . expr TOKEN_R_PAREN if_nest TOKEN_ELSE stmt
    9 if_nest: TOKEN_IF TOKEN_L_PAREN . expr TOKEN_R_PAREN if_nest TOKEN_ELSE if_nest

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    id          go to state 30
    expr        go to state 114
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 105

    8 stmt: TOKEN_L_BRACE stmt_list . TOKEN_R_BRACE
   12 if_nest: TOKEN_L_BRACE stmt_list . TOKEN_R_BRACE

    TOKEN_R_BRACE  shift, and go to state 115


State 106

    7 stmt: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE . stmt

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_IF                 shift, and go to state 6
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_L_BRACE            shift, and go to state 10
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    stmt        go to state 116
    decl        go to state 16
    id          go to state 17
    expr        go to state 18
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 107

    4 stmt: decl TOKEN_SEMICOLON .
   10 if_nest: decl TOKEN_SEMICOLON .

    TOKEN_ELSE  reduce using rule 10 (if_nest)
    $default    reduce using rule 4 (stmt)


State 108

    5 stmt: expr TOKEN_SEMICOLON .
   11 if_nest: expr TOKEN_SEMICOLON .

    TOKEN_ELSE  reduce using rule 11 (if_nest)
    $default    reduce using rule 5 (stmt)


State 109

   22 arg_list: TOKEN_L_PAREN arg_list . TOKEN_R_PAREN

    TOKEN_R_PAREN  shift, and go to state 117


State 110

   21 arg_list: arg TOKEN_COMMA . arg_list

    TOKEN_IDENTIFIER  shift, and go to state 8
    TOKEN_L_PAREN     shift, and go to state 97

    arg_list  go to state 118
    arg       go to state 99
    id        go to state 100


State 111

   24 arg: id TOKEN_COLON . type

    TOKEN_ARRAY      shift, and go to state 62
    TOKEN_BOOLEAN    shift, and go to state 63
    TOKEN_CHARACTER  shift, and go to state 64
    TOKEN_FLOAT      shift, and go to state 65
    TOKEN_FUNCTION   shift, and go to state 86
    TOKEN_INTEGER    shift, and go to state 67
    TOKEN_STRING     shift, and go to state 68
    TOKEN_VOID       shift, and go to state 69

    type  go to state 119


State 112

   25 idx: TOKEN_L_BRACKET expr TOKEN_R_BRACKET .

    $default  reduce using rule 25 (idx)


State 113

   16 decl: id TOKEN_COLON type idx type TOKEN_ASSIGN . brac_list

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_L_BRACE            shift, and go to state 120
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    brac_list   go to state 121
    id          go to state 30
    expr        go to state 122
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 114

    6 stmt: TOKEN_IF TOKEN_L_PAREN expr . TOKEN_R_PAREN stmt
    7     | TOKEN_IF TOKEN_L_PAREN expr . TOKEN_R_PAREN if_nest TOKEN_ELSE stmt
    9 if_nest: TOKEN_IF TOKEN_L_PAREN expr . TOKEN_R_PAREN if_nest TOKEN_ELSE if_nest

    TOKEN_R_PAREN  shift, and go to state 123


State 115

    8 stmt: TOKEN_L_BRACE stmt_list TOKEN_R_BRACE .
   12 if_nest: TOKEN_L_BRACE stmt_list TOKEN_R_BRACE .

    TOKEN_ELSE  reduce using rule 12 (if_nest)
    $default    reduce using rule 8 (stmt)


State 116

    7 stmt: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE stmt .

    $default  reduce using rule 7 (stmt)


State 117

   22 arg_list: TOKEN_L_PAREN arg_list TOKEN_R_PAREN .

    $default  reduce using rule 22 (arg_list)


State 118

   21 arg_list: arg TOKEN_COMMA arg_list .

    $default  reduce using rule 21 (arg_list)


State 119

   24 arg: id TOKEN_COLON type .

    $default  reduce using rule 24 (arg)


State 120

   18 brac_list: TOKEN_L_BRACE . brac_list TOKEN_R_BRACE

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_L_BRACE            shift, and go to state 120
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    brac_list   go to state 124
    id          go to state 30
    expr        go to state 122
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 121

   16 decl: id TOKEN_COLON type idx type TOKEN_ASSIGN brac_list .

    $default  reduce using rule 16 (decl)


State 122

   19 brac_list: expr . TOKEN_COMMA brac_list
   20          | expr .

    TOKEN_COMMA  shift, and go to state 125

    $default  reduce using rule 20 (brac_list)


State 123

    6 stmt: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN . stmt
    7     | TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN . if_nest TOKEN_ELSE stmt
    9 if_nest: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN . if_nest TOKEN_ELSE if_nest

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_IF                 shift, and go to state 91
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_L_BRACE            shift, and go to state 92
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    stmt        go to state 93
    if_nest     go to state 126
    decl        go to state 95
    id          go to state 17
    expr        go to state 96
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 124

   18 brac_list: TOKEN_L_BRACE brac_list . TOKEN_R_BRACE

    TOKEN_R_BRACE  shift, and go to state 127


State 125

   19 brac_list: expr TOKEN_COMMA . brac_list

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_L_BRACE            shift, and go to state 120
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    brac_list   go to state 128
    id          go to state 30
    expr        go to state 122
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 126

    7 stmt: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest . TOKEN_ELSE stmt
    9 if_nest: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest . TOKEN_ELSE if_nest

    TOKEN_ELSE  shift, and go to state 129


State 127

   18 brac_list: TOKEN_L_BRACE brac_list TOKEN_R_BRACE .

    $default  reduce using rule 18 (brac_list)


State 128

   19 brac_list: expr TOKEN_COMMA brac_list .

    $default  reduce using rule 19 (brac_list)


State 129

    7 stmt: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE . stmt
    9 if_nest: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE . if_nest

    TOKEN_INTEGER_LITERAL    shift, and go to state 1
    TOKEN_CHARACTER_LITERAL  shift, and go to state 2
    TOKEN_STRING_LITERAL     shift, and go to state 3
    TOKEN_FLOAT_LITERAL      shift, and go to state 4
    TOKEN_FALSE              shift, and go to state 5
    TOKEN_IF                 shift, and go to state 91
    TOKEN_TRUE               shift, and go to state 7
    TOKEN_IDENTIFIER         shift, and go to state 8
    TOKEN_L_PAREN            shift, and go to state 9
    TOKEN_L_BRACE            shift, and go to state 92
    TOKEN_NEG                shift, and go to state 11
    TOKEN_NOT                shift, and go to state 12

    stmt        go to state 116
    if_nest     go to state 130
    decl        go to state 95
    id          go to state 17
    expr        go to state 96
    expr_or     go to state 19
    expr_and    go to state 20
    expr_comp   go to state 21
    expr_add    go to state 22
    expr_mul    go to state 23
    expr_exp    go to state 24
    expr_unary  go to state 25
    exp_post    go to state 26
    factor      go to state 27
    literal     go to state 28


State 130

    9 if_nest: TOKEN_IF TOKEN_L_PAREN expr TOKEN_R_PAREN if_nest TOKEN_ELSE if_nest .

    $default  reduce using rule 9 (if_nest)
