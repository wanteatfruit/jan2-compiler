=====STUDENT TESTS=====
====Good Tests====
===[STUDENT TESTS/good1.bminor Input]===

n: integer;
m: integer = 20;

b: boolean;
c: boolean = true;
s: string;
t: string = "hello\n";
d: char;
e: char = 'a';

arr: array [5] integer = {1,2,3,4,5}; // TODO: fix this 
===[STUDENT TESTS/good1.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good1.bminor Output]===
n: integer;
m: integer = 20;
b: boolean;
c: boolean = true;
s: string;
t: string = "hello\n";
d: char;
e: char = 'a';
arr: array [5] integer = {1, 2, 3, 4, 5};




===[STUDENT TESTS/good10.bminor Input]===
main: function integer()={

	x: integer = 5;
	for(i<=5;;i++){
		print "Loop", i;
	}if(true){
			for(x=5;x<M;){
		y++;
	}
		return x-k[2];
	}for(;;){
		y++;
	}

    f(1,2);
}
===[STUDENT TESTS/good10.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good10.bminor Output]===
main: function integer() = {
	x: integer = 5;
	for(i<=5; ; i++) {
		print "Loop", i;
	}
	if(true) {
		for(x=5; x<M; ) {
			y++;
		}
		return x-k[2];
	}
	for(; ; ) {
		y++;
	}
	f(1, 2);
}




===[STUDENT TESTS/good11.bminor Input]===
fib: function integer ( x: integer ) =
{
	if(x<1) {
		return 0;
	} else {
		if(x<2) {
			return 1;
		} else {
			return fib(x-1)+fib(x-2);
		}
	}
}
===[STUDENT TESTS/good11.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good11.bminor Output]===
fib: function integer(x: integer) = {
	if(x<1) {
		return 0;
	} else {
		if(x<2) {
			return 1;
		} else {
			return fib(x-1)+fib(x-2);
		}
	}
}




===[STUDENT TESTS/good12.bminor Input]===
/* Display fibonnaci numbers from 0 to 45. */
fib: function integer ( x: integer ) = {
if( x<1 ) { return 0; } else {
if((x<2)) { return 1; } else {
return fib((x)-1) + fib((x-2)); // recursive step
} }}
===[STUDENT TESTS/good12.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good12.bminor Output]===
fib: function integer(x: integer) = {
	if(x<1) {
		return 0;
	} else {
		if((x<2)) {
			return 1;
		} else {
			return fib((x)-1)+fib((x-2));
		}
	}
}




===[STUDENT TESTS/good13.bminor Input]===
testfunc: function void(x: integer, y: integer, z: integer) = {
	r: integer;
	b: boolean;
	r = (x + y) / z;
	r = x + (y + z);
	b = (true || false) && (false || true);
	r = x + (y / z);
	r = (x + y) + z;
	b = (x + y) < (x + z);
	b = (true && false) || (false && true);
}
===[STUDENT TESTS/good13.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good13.bminor Output]===
testfunc: function void(x: integer, y: integer, z: integer) = {
	r: integer;
	b: boolean;
	r=(x+y)/z;
	r=x+(y+z);
	b=(true||false)&&(false||true);
	r=x+(y/z);
	r=(x+y)+z;
	b=(x+y)<(x+z);
	b=(true&&false)||(false&&true);
}




===[STUDENT TESTS/good14.bmnior Input]===
main: function integer () = {
if(x>y){if(m<5){if(c==g) y = 5; else m++;}
	}else{
		x++;
	} if(false) x--;
	if(x==1) x--; else{
		n++;
		g--;
	} if(true) if(false) y++; else x++; if(x==4) x++;
	else y++;if(true){x++; y++; }
	else{x=x-1;}
}
===[STUDENT TESTS/good14.bmnior Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good14.bmnior Output]===
main: function integer() = {
	if(x>y) {
		if(m<5) {
			if(c==g) {
				y=5;
			} else {
				m++;
			}
		}
	} else {
		x++;
	}
	if(false) {
		x--;
	}
	if(x==1) {
		x--;
	} else {
		n++;
		g--;
	}
	if(true) {
		if(false) {
			y++;
		} else {
			x++;
		}
	}
	if(x==4) {
		x++;
	} else {
		y++;
	}
	if(true) {
		x++;
		y++;
	} else {
		x=x-1;
	}
}




===[STUDENT TESTS/good15.bminor Input]===
//Arrays
names: array [3] string = {"This is not 3 names"};
c: array [3] integer = {3, x, 4%2};
b: array [3] integer;
r: array [2] array [2] integer;
t: array [2] array [2] integer = {{1,2},{3,4}};
d: array [5] integer = {1,2,3,4,5};
f: array [3] boolean = {true, false, false};
g: array [1] char = {'a', 'c', 'd'};
m: array[2] integer;
===[STUDENT TESTS/good15.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good15.bminor Output]===
names: array [3] string = {"This is not 3 names"};
c: array [3] integer = {3, x, 4%2};
b: array [3] integer;
r: array [2] array [2] integer;
t: array [2] array [2] integer = {{1, 2}, {3, 4}};
d: array [5] integer = {1, 2, 3, 4, 5};
f: array [3] boolean = {true, false, false};
g: array [1] char = {'a', 'c', 'd'};
m: array [2] integer;




===[STUDENT TESTS/good16.bminor Input]===
//Testing arrays and indexes
a: array [5] integer;
b: array [5] integer = {1,2,3,4,5};

main: function integer()={for(i=0; i<5; i++){
		b[i] = b[i]*2;
		b[i] = b[i] + 3 / 2;}

	if(x!=y)if(y!=x)if(c==y)if(true)x++;else{y++;}else for(j%2;j!=k;j--)j^2;

	print "hello", 3, x+5, y, 'c';return 0;}
===[STUDENT TESTS/good16.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good16.bminor Output]===
a: array [5] integer;
b: array [5] integer = {1, 2, 3, 4, 5};
main: function integer() = {
	for(i=0; i<5; i++) {
		b[i]=b[i]*2;
		b[i]=b[i]+3/2;
	}
	if(x!=y) {
		if(y!=x) {
			if(c==y) {
				if(true) {
					x++;
				} else {
					y++;
				}
			} else {
				for(j%2; j!=k; j--) {
					j^2;
				}
			}
		}
	}
	print "hello", 3, x+5, y, 'c';
	return 0;
}




===[STUDENT TESTS/good17.bminor Input]===

			main: function integer()={
//This is a single line comment
	x: char = 'a';
								z: boolean = true;

	if(x==y) return x+y;else{
		for(x=1;x<y;x++) print "Hello", "World"; if(!z){
							x = x + 3;
y++; /*Multiline comment
			here is more comment
			even More*/
		}
		if(!z) print "Not Z: ", z;}return 0;}
===[STUDENT TESTS/good17.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good17.bminor Output]===
main: function integer() = {
	x: char = 'a';
	z: boolean = true;
	if(x==y) {
		return x+y;
	} else {
		for(x=1; x<y; x++) {
			print "Hello", "World";
		}
		if(!z) {
			x=x+3;
			y++;
		}
		if(!z) {
			print "Not Z: ", z;
		}
	}
	return 0;
}




===[STUDENT TESTS/good18.bminor Input]===
a: array[3] array[1] integer = {{1}, {2}, {3}};
ef: float = 2.68e10;
f: float = 1.2;
===[STUDENT TESTS/good18.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good18.bminor Output]===
a: array [3] array [1] integer = {{1}, {2}, {3}};
ef: float = 2.68e10;
f: float = 1.2;




===[STUDENT TESTS/good19.bminor Input]===
/*
This program displays a square bouncing around on the screen.
Click to reset the square in a new place.
It makes use of the (included) C gfx library and the standard C library,
and exercises, loops, comparisons, and logical operators.
*/

/* These are the functions in the gfx library. */
gfx_open: function void ( width: integer, height: integer, title:string );
gfx_point: function void ( x: integer, y: integer );
gfx_line: function void ( x1:integer, y1:integer, x2:integer, y2:integer );
gfx_color: function void ( red:integer, green: integer, blue:integer );
gfx_clear: function void ();
gfx_clear_color: function void ( red:integer, green: integer, blue:integer );
gfx_wait: function char ();
gfx_xpos: function integer ();
gfx_ypos: function integer ();
gfx_xsize: function integer ();
gfx_ysize: function integer ();
gfx_event_waiting: function boolean ();
gfx_flush: function integer ();

/* These functions come from the C standard library. */

usleep: function void ( usecs: integer );
rand: function integer();

draw_box: function void ( x: integer, y:integer, size: integer ) =
{
	gfx_color(255,255,255);
	gfx_line(x,y,x+size,y);
	gfx_line(x+size,y,x+size,y+size);
	gfx_line(x+size,y+size,x,y+size);
	gfx_line(x,y+size,x,y);
}

/*
Note that the precision multiplier indicates fixed-point
match to keep track of sub-pixel position and velocity for the box.
*/

main: function integer () =
{
	precision: integer = 100;

	xsize: integer = 500; // pixels
	ysize: integer = 500; // pixels 

	x: integer = precision * xsize / 2;
	y: integer = precision * ysize / 2;

	vx: integer = precision * 3;
	vy: integer = precision * -5 ;

	deltat: integer = 100;

	gfx_open(xsize,ysize,"Bounce!");

	for(;;) {
		print "x: ", x, " y: ", y, " vx: ", vx, " vy: ", vy, "\n";

		if(gfx_event_waiting()) {
			c: char;
			c = gfx_wait();
			if(c=='q') return 0;
			x = gfx_xpos()*precision;
			y = gfx_ypos()*precision;
			vx = 5*precision;
		}

		vy = vy + 1 * precision;

		if(x<0 && vx<0) {
			vx = -9*vx/10;
		}	

		if(x>(xsize*precision) && vx>0) {
			vx = -9*vx/10;
		}

		if(y>(ysize*precision) && vy>0) {
			vy = -9*vy/10;
		}

		x = x + vx*deltat/precision;
		y = y + vy*deltat/precision;

		gfx_clear();
		draw_box(x/precision,y/precision,25);
		gfx_flush();

		usleep(deltat*precision);
	}
}
===[STUDENT TESTS/good19.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good19.bminor Output]===
gfx_open: function void(width: integer, height: integer, title: string);
gfx_point: function void(x: integer, y: integer);
gfx_line: function void(x1: integer, y1: integer, x2: integer, y2: integer);
gfx_color: function void(red: integer, green: integer, blue: integer);
gfx_clear: function void();
gfx_clear_color: function void(red: integer, green: integer, blue: integer);
gfx_wait: function char();
gfx_xpos: function integer();
gfx_ypos: function integer();
gfx_xsize: function integer();
gfx_ysize: function integer();
gfx_event_waiting: function boolean();
gfx_flush: function integer();
usleep: function void(usecs: integer);
rand: function integer();
draw_box: function void(x: integer, y: integer, size: integer) = {
	gfx_color(255, 255, 255);
	gfx_line(x, y, x+size, y);
	gfx_line(x+size, y, x+size, y+size);
	gfx_line(x+size, y+size, x, y+size);
	gfx_line(x, y+size, x, y);
}
main: function integer() = {
	precision: integer = 100;
	xsize: integer = 500;
	ysize: integer = 500;
	x: integer = precision*xsize/2;
	y: integer = precision*ysize/2;
	vx: integer = precision*3;
	vy: integer = precision*-5;
	deltat: integer = 100;
	gfx_open(xsize, ysize, "Bounce!");
	for(; ; ) {
		print "x: ", x, " y: ", y, " vx: ", vx, " vy: ", vy, "\n";
		if(gfx_event_waiting()) {
			c: char;
			c=gfx_wait();
			if(c=='q') {
				return 0;
			}
			x=gfx_xpos()*precision;
			y=gfx_ypos()*precision;
			vx=5*precision;
		}
		vy=vy+1*precision;
		if(x<0&&vx<0) {
			vx=-9*vx/10;
		}
		if(x>(xsize*precision)&&vx>0) {
			vx=-9*vx/10;
		}
		if(y>(ysize*precision)&&vy>0) {
			vy=-9*vy/10;
		}
		x=x+vx*deltat/precision;
		y=y+vy*deltat/precision;
		gfx_clear();
		draw_box(x/precision, y/precision, 25);
		gfx_flush();
		usleep(deltat*precision);
	}
}




===[STUDENT TESTS/good2.bminor Input]===
/* Function prototypes are declarations without bodies. */

ComputeAscii: function char ( c: char );

GetLength: function integer ( s: string, i: integer );

/* Function body has some code in it */

GetArea: function integer ( width: integer, height: integer ) =
{
	return width * height;
}

===[STUDENT TESTS/good2.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good2.bminor Output]===
ComputeAscii: function char(c: char);
GetLength: function integer(s: string, i: integer);
GetArea: function integer(width: integer, height: integer) = {
	return width*height;
}




===[STUDENT TESTS/good20.bminor Input]===
x: integer;
y: integer = 100;
z: char = '\t';
y: char = '\n';
h: char = 'a';
main: function integer()={ even: string = "is Even!\n";
	odd: string = "is Odd!\n"; for(x=0;x<y;x++){
if(x%2==0) print x, even;else {print x, odd;}}}
===[STUDENT TESTS/good20.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good20.bminor Output]===
x: integer;
y: integer = 100;
z: char = '\t';
y: char = '\n';
h: char = 'a';
main: function integer() = {
	even: string = "is Even!\n";
	odd: string = "is Odd!\n";
	for(x=0; x<y; x++) {
		if(x%2==0) {
			print x, even;
		} else {
			print x, odd;
		}
	}
}




===[STUDENT TESTS/good3.bminor Input]===
/* A function contains a sequence of statements */
/* Some of those statements can be decls */

simplefunc: function void (s: string) = {
     x: integer;
     y: integer = 20;
     s: string = "hello world";
}

===[STUDENT TESTS/good3.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good3.bminor Output]===
simplefunc: function void(s: string) = {
	x: integer;
	y: integer = 20;
	s: string = "hello world";
}




===[STUDENT TESTS/good4.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 + x / y;

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x < y ) {
         return true;
     } else {
         return false;
     }

}

===[STUDENT TESTS/good4.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good4.bminor Output]===
simplefunc: function boolean(x: integer, y: integer) = {
	z: integer = x*y;
	z=16+x/y;
	print "input is: ", x, " and ", y, "\n";
	if(x<y) {
		return true;
	} else {
		return false;
	}
}




===[STUDENT TESTS/good5.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 + x / y;

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x < y ) {
         return true;
     } else {
         return false;
     }

}

===[STUDENT TESTS/good5.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good5.bminor Output]===
simplefunc: function boolean(x: integer, y: integer) = {
	z: integer = x*y;
	z=16+x/y;
	print "input is: ", x, " and ", y, "\n";
	if(x<y) {
		return true;
	} else {
		return false;
	}
}




===[STUDENT TESTS/good6.bminor Input]===
/* Try several variations of for-loops */

simplefunc: function void (r: integer, s: integer, t: integer ) = {

    i: integer;

    for( i=0; i<r; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<s; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<r; ) {
        print i,"\n";
        i++;
    }

    for(;;) print "forever!\n";
}

===[STUDENT TESTS/good6.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good6.bminor Output]===
simplefunc: function void(r: integer, s: integer, t: integer) = {
	i: integer;
	for(i=0; i<r; i++) {
		print i, "\n";
	}
	i=0;
	for(; i<s; i++) {
		print i, "\n";
	}
	i=0;
	for(; i<r; ) {
		print i, "\n";
		i++;
	}
	for(; ; ) {
		print "forever!\n";
	}
}




===[STUDENT TESTS/good7.bminor Input]===
/* Test various nestings of if-else statements */

testit: function boolean ( x: integer, y: integer ) = {

	/* If statement without braces */
	if( x<y ) print "less\n"; else print "low\n";

	/* If statement with braces */
	if( x<y ) { print "less\n"; } else { print "low\n"; }

	/* This statement should print nothing */
        if(20<10) if(10<20) print "incorrect!"; else print "dangling else!";

	/* statements and decls inside of if-else */

        if( x>y ) {
              i: integer;
              for(i=0;i<x;i++) print i, "\n";
        } else {
              i: integer;
              for(i=0;i<y;i++) print i, "\n";
        }

	/* A decl can come after a few statements */
	i: integer;

	/* try the other way around */
	for(i=0;i<x;i++) {
              if( i<x ) print "small"; else print "large";
        }

        return true;
}

===[STUDENT TESTS/good7.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good7.bminor Output]===
testit: function boolean(x: integer, y: integer) = {
	if(x<y) {
		print "less\n";
	} else {
		print "low\n";
	}
	if(x<y) {
		print "less\n";
	} else {
		print "low\n";
	}
	if(20<10) {
		if(10<20) {
			print "incorrect!";
		} else {
			print "dangling else!";
		}
	}
	if(x>y) {
		i: integer;
		for(i=0; i<x; i++) {
			print i, "\n";
		}
	} else {
		i: integer;
		for(i=0; i<y; i++) {
			print i, "\n";
		}
	}
	i: integer;
	for(i=0; i<x; i++) {
		if(i<x) {
			print "small";
		} else {
			print "large";
		}
	}
	return true;
}




===[STUDENT TESTS/good8.bminor Input]===
/* Now try some expressions */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if( a<b ) return a; else return b;
}

testfunc: function void ( z: integer ) =
{
	// Nested integer operators.
	y: integer = x*(x*10 + 55%6 + z/10);
	print "y: ", y, "\n";

	// Nested boolean operations.
	c: boolean = ( x<100 && y>200 ) || !(b=true);
	print "c: ", c, "\n";

	// Boolean operations on strings?
	d: boolean = (s == "goodbye");
	print "d: ", d, "\n";

	// Can we stack up assignments?
	z = y = x;

	a: array [100] integer;

	// Function calls and array accesses:
	y = min(a[10],a[20]);
}

===[STUDENT TESTS/good8.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good8.bminor Output]===
x: integer = 65;
s: string = "hello";
b: boolean = false;
min: function integer(a: integer, b: integer) = {
	if(a<b) {
		return a;
	} else {
		return b;
	}
}
testfunc: function void(z: integer) = {
	y: integer = x*(x*10+55%6+z/10);
	print "y: ", y, "\n";
	c: boolean = (x<100&&y>200)||!(b=true);
	print "c: ", c, "\n";
	d: boolean = (s=="goodbye");
	print "d: ", d, "\n";
	z=y=x;
	a: array [100] integer;
	y=min(a[10], a[20]);
}




===[STUDENT TESTS/good9.bminor Input]===
main: function integer()={

	puts("hello world", 5, 9);

	hello('c', 15, (1+4));

	foobar((3*x)+5, (x+5)*3, (3*x)+5);
}
===[STUDENT TESTS/good9.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good9.bminor Output]===
main: function integer() = {
	puts("hello world", 5, 9);
	hello('c', 15, (1+4));
	foobar((3*x)+5, (x+5)*3, (3*x)+5);
}




====Bad Tests====
=====HIDDEN TESTS=====
====Good Tests====
===[HIDDEN TESTS/good1.bminor Input]===
/* A program is a sequence of declarations */
/* Try a variety of variable declarations. */

n: integer;
m: integer = 20;

b: boolean;
c: boolean = false;
s: string;
t: string = "world\n";
d: char;
e: char = 'x';

f: float = 1.23;

x: array [] string;
y: array [] string = { "a", "b", "c" };
z: array [] array [] string = { {"a","b","c"}, {"x","y","z"} };

g: array [3] string;
h: array [3] string = { "a", "b", "c" };
i: array [2] array [3] string = { {"a","b","c"}, {"x","y","z"} };

===[HIDDEN TESTS/good1.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good1.bminor Output]===
n: integer;
m: integer = 20;
b: boolean;
c: boolean = false;
s: string;
t: string = "world\n";
d: char;
e: char = 'x';
f: float = 1.23;
x: array [] string;
y: array [] string = {"a", "b", "c"};
z: array [] array [] string = {{"a", "b", "c"}, {"x", "y", "z"}};
g: array [3] string;
h: array [3] string = {"a", "b", "c"};
i: array [2] array [3] string = {{"a", "b", "c"}, {"x", "y", "z"}};




===[HIDDEN TESTS/good10.bminor Input]===
/* Try accesssing arrays of various sizes; */

a: array [10] integer = {100,200,300,400,500,600,700,800,900};
b: array [10] integer;
c: array [10] array [10] integer;

testfunc: function void () = {
    i: integer;
    j: integer;

    for(i=0;i<10;i++) {
        b[i] = a[i] * 10;
    }

    for(i=0;i<5;i++) {
        b[i*2] = a[i] + b[i];
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            c[i][j] = i*j;
        }
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            print c[i][j];
            print " ";
        }
        print "\n";
    }
}

===[HIDDEN TESTS/good10.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good10.bminor Output]===
a: array [10] integer = {100, 200, 300, 400, 500, 600, 700, 800, 900};
b: array [10] integer;
c: array [10] array [10] integer;
testfunc: function void() = {
	i: integer;
	j: integer;
	for(i=0; i<10; i++) {
		b[i]=a[i]*10;
	}
	for(i=0; i<5; i++) {
		b[i*2]=a[i]+b[i];
	}
	for(j=0; j<10; i++) {
		for(i=0; i<10; i++) {
			c[i][j]=i*j;
		}
	}
	for(j=0; j<10; i++) {
		for(i=0; i<10; i++) {
			print c[i][j];
			print " ";
		}
		print "\n";
	}
}




===[HIDDEN TESTS/good2.bminor Input]===
/* Function prototypes are declarations without bodies. */

ComputeAscii: function char ( c: char );

GetLength: function integer ( s: string, i: integer );

/* Function body has some code in it */

GetArea: function integer ( width: float, height: float ) =
{
	return width * height;
}

===[HIDDEN TESTS/good2.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good2.bminor Output]===
ComputeAscii: function char(c: char);
GetLength: function integer(s: string, i: integer);
GetArea: function integer(width: float, height: float) = {
	return width*height;
}




===[HIDDEN TESTS/good3.bminor Input]===
/* A function contains a sequence of statements */
/* Some of those statements can be decls */

simplefunc: function void () = {
     x: integer;
     y: integer = 20;
     s: string = "hello world";
     f: float = 3.3e1;
}

===[HIDDEN TESTS/good3.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good3.bminor Output]===
simplefunc: function void() = {
	x: integer;
	y: integer = 20;
	s: string = "hello world";
	f: float = 3.3e1;
}




===[HIDDEN TESTS/good4.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 - x / y;

     r: integer = x + (y + z);

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x <= y ) {
         return true;
     } else {
         return false;
     }

}

===[HIDDEN TESTS/good4.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good4.bminor Output]===
simplefunc: function boolean(x: integer, y: integer) = {
	z: integer = x*y;
	z=16-x/y;
	r: integer = x+(y+z);
	print "input is: ", x, " and ", y, "\n";
	if(x<=y) {
		return true;
	} else {
		return false;
	}
}




===[HIDDEN TESTS/good5.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 + x / y;

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x < y ) {
         return true;
     } else {
         return false;
     }

}

===[HIDDEN TESTS/good5.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good5.bminor Output]===
simplefunc: function boolean(x: integer, y: integer) = {
	z: integer = x*y;
	z=16+x/y;
	print "input is: ", x, " and ", y, "\n";
	if(x<y) {
		return true;
	} else {
		return false;
	}
}




===[HIDDEN TESTS/good6.bminor Input]===
/* Try several variations of for-loops */

simplefunc: function void (r: integer, s: integer, t: integer ) = {

    i: integer;

    for( i=0; i<r; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<s; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<r; ) {
        print i,"\n";
        i++;
    }

    for(;;) print "forever!\n";
}

===[HIDDEN TESTS/good6.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good6.bminor Output]===
simplefunc: function void(r: integer, s: integer, t: integer) = {
	i: integer;
	for(i=0; i<r; i++) {
		print i, "\n";
	}
	i=0;
	for(; i<s; i++) {
		print i, "\n";
	}
	i=0;
	for(; i<r; ) {
		print i, "\n";
		i++;
	}
	for(; ; ) {
		print "forever!\n";
	}
}




===[HIDDEN TESTS/good7.bminor Input]===
/* Test various nestings of if-else statements */

testit: function boolean ( x: integer, y: integer ) = {

	/* If statement without braces */
	if( x<y ) print "less\n"; else print "low\n";

	/* If statement with braces */
	if( x<y ) { print "less\n"; } else { print "low\n"; }

	/* This statement should print nothing */
        if(20<10) if(10<20) print "incorrect!"; else print "dangling else!";

	/* statements and decls inside of if-else */

        if( x>y ) {
              i: integer;
              for(i=0;i<x;i++) print i, "\n";
        } else {
              i: integer;
              for(i=0;i<y;i++) print i, "\n";
        }

	/* A decl can come after a few statements */
	i: integer;

	/* try the other way around */
	for(i=0;i<x;i++) {
              if( i<x ) print "small"; else print "large";
        }

        return true;
}

===[HIDDEN TESTS/good7.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good7.bminor Output]===
testit: function boolean(x: integer, y: integer) = {
	if(x<y) {
		print "less\n";
	} else {
		print "low\n";
	}
	if(x<y) {
		print "less\n";
	} else {
		print "low\n";
	}
	if(20<10) {
		if(10<20) {
			print "incorrect!";
		} else {
			print "dangling else!";
		}
	}
	if(x>y) {
		i: integer;
		for(i=0; i<x; i++) {
			print i, "\n";
		}
	} else {
		i: integer;
		for(i=0; i<y; i++) {
			print i, "\n";
		}
	}
	i: integer;
	for(i=0; i<x; i++) {
		if(i<x) {
			print "small";
		} else {
			print "large";
		}
	}
	return true;
}




===[HIDDEN TESTS/good8.bminor Input]===
/* Now try some expressions */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if( a<b ) return a; else return b;
}

testfunc: function void ( z: integer ) =
{
	// Nested integer operators.
	y: integer = x*(x*10 + 55%6 + z/10);
	print "y: ", y, "\n";

	// Nested boolean operations.
	c: boolean = ( x<100 && y>200 ) || !(b=true);
	print "c: ", c, "\n";

	// Boolean operations on strings?
	d: boolean = (s == "goodbye");
	print "d: ", d, "\n";

	// Can we stack up assignments?
	z = y = x;

	a: array [100] integer;

	// Function calls and array accesses:
	y = min(a[10],a[20]);

	// float operations
	f: float = 3.4 + 5.6;
	g: float = 34.1e7 + 9.9e3;
}

===[HIDDEN TESTS/good8.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good8.bminor Output]===
x: integer = 65;
s: string = "hello";
b: boolean = false;
min: function integer(a: integer, b: integer) = {
	if(a<b) {
		return a;
	} else {
		return b;
	}
}
testfunc: function void(z: integer) = {
	y: integer = x*(x*10+55%6+z/10);
	print "y: ", y, "\n";
	c: boolean = (x<100&&y>200)||!(b=true);
	print "c: ", c, "\n";
	d: boolean = (s=="goodbye");
	print "d: ", d, "\n";
	z=y=x;
	a: array [100] integer;
	y=min(a[10], a[20]);
	f: float = 3.4+5.6;
	g: float = 34.1e7+9.9e3;
}




===[HIDDEN TESTS/good9.bminor Input]===
/* Check for minimum use of parentheses. */

testfunc: function void ( x: integer, y:integer, z:integer ) = {

          r: integer;
	  b: boolean;

          // Parens required
	  r = (x+y)/z;
	  r = x+(y+z);
	  b = (true||false) && (false||true);

          // Parens not required
	  r = x+(y/z);
	  r = (x+y)+z;
	  b = (x+y) < (x+z);
	  b = (true&&false) || (false&&true);

}

===[HIDDEN TESTS/good9.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good9.bminor Output]===
testfunc: function void(x: integer, y: integer, z: integer) = {
	r: integer;
	b: boolean;
	r=(x+y)/z;
	r=x+(y+z);
	b=(true||false)&&(false||true);
	r=x+(y/z);
	r=(x+y)+z;
	b=(x+y)<(x+z);
	b=(true&&false)||(false&&true);
}




====Bad Tests====
===== SUMMARIZED PRINTER RESULTS =====
{
  "student_tests": {
    "Good": {
      "correct": 20,
      "incorrect": 0
    }
  },
  "hidden_tests": {
    "Good": {
      "correct": 10,
      "incorrect": 0
    }
  }
}

Printer Project
---------------

General Structure (20/20 points)
----------------------------------------------
Program stucture checks out and looks well formed

Construction of the abstract syntax tree and coverage of all language elements (25/30 points)
----------------------------------------------

Indentation of Blocks (10 points)
Nicely done! Indenting is consistent

Parentheses Display: (5/10 points)
Some not needed parentheses

Spacing of Expressions: (10 points)
Expressions formatting appears to be correct

Student Tests (20/20 points)
------------------------------------------
Nice test coverage

Hidden Tests (20/20 points)
------------------------------------------
Good work passing all of the hidden tests

Coding Style (10/10 points)
------------------------------------------
Coding style looks quite nice. Well done!

---------------
