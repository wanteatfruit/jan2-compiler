=====STUDENT TESTS=====
====Good Tests====
===[good1.bminor Input]===
x: integer = 5;
y: integer = 10;

main: function void ()=
{
	x: integer = y * 10 + 15 - 4;
}
===[good1.bminor Output]===
Success!

y resolves to global y


return code: 0


===[good10.bminor Input]===
/* Test array of array assignments. */

x: array [5] integer = {1,2,3,4,5};
y: array [5] array [5] integer;

main: function void () =
{
	y[1] = x;
	count: integer;
	for(count = 0; count < 5; count++)
	{
		y[count] = x;
	} 	
}

===[good10.bminor Output]===
Success!

y resolves to global y
x resolves to global x
count resolves to local 1
count resolves to local 1
count resolves to local 1
y resolves to global y
count resolves to local 1
x resolves to global x


return code: 0


===[good11.bminor Input]===
test1:function integer (a:integer, b:integer)=
{
    x:integer = a;
	return a + b;
}

main:function void ()=
{
	test1(1, 2);
}
===[good11.bminor Output]===
Success!

a resolves to param 1
a resolves to param 1
b resolves to param 2
test1 resolves to global test1


return code: 0


===[good12.bminor Input]===
main: function void ()=
{
	x: integer = 1;
	y: integer = 2;
	z: integer = 3;
	z = x + y;
	y = x + z;
}
===[good12.bminor Output]===
Success!

z resolves to local 3
x resolves to local 1
y resolves to local 2
y resolves to local 2
x resolves to local 1
z resolves to local 3


return code: 0


===[good13.bminor Input]===
test: function void(a:integer) = {
    a: integer = 1; //redeclaration
}
===[good13.bminor Output]===
Success!



return code: 0


===[good2.bminor Input]===
func1: function void (s:string);

===[good2.bminor Output]===
Success!



return code: 0


===[good3.bminor Input]===
/* Test name resolution at multiple scope levels. */

x: integer = 5;
y: integer = 10;

main: function void () =
{
	x: integer = 6;
	y: integer = 11;
	{
		x: integer = 7;
		y: integer = 12;
		{
			x: char = 'a';
			y: integer = 13;
		}
		z:integer = x + y;
	}
}
	


===[good3.bminor Output]===
Success!

x resolves to local 3
y resolves to local 4


return code: 0


===[good4.bminor Input]===
/* Assign an integer expression to local variable. */

x: integer = 5;
y: integer = 10;

test: function integer();

main: function void ()=
{
	x:integer = y * 10 + 15 - test();
}

test: function integer () =
{
	return 5;
}
	


===[good4.bminor Output]===
Success!

y resolves to global y
test resolves to global test


return code: 0


===[good5.bminor Input]===
// Test integer comparisons and functions. */

intFxn: function integer(c:char);

glob: integer = 1;

main: function void ()=
{
	c: integer;
	if(6 == intFxn('c'))
	{
		print "unreachable";
	}
	if(5 >= 5)
	{
		print "unreachable";
	}
	if(c > 5)
	{
		print "unreachable";
	}
	if(c >= 5)
	{
		print "unreachable";
	}
	if(intFxn('a') <= 5)
	{
		print "reachable";
	}
	if(glob < 5)
	{
		print "reachable";
	}
}

intFxn: function integer(c: char)=
{
	if(c == 'a')
	{
		return 5;
	}
	return 0;
}


===[good5.bminor Output]===
Success!

intFxn resolves to global intFxn
c resolves to local 1
c resolves to local 1
intFxn resolves to global intFxn
glob resolves to global glob
c resolves to param 1


return code: 0


===[good6.bminor Input]===
/* Test function declarations without prototypes. */

test1: function integer (a:integer, b:integer)={
	return a + b;
}

test2: function boolean (a:integer, b:integer)={
	return a < b;
}

test3: function char (a:integer)=
{
	if (a > 5) {
		return 'x';
	} else {
		return 'y';
	}
}

main:function void ()=
{
	print test1(10,20), test2(30,40), test3(10), "\n";
}


===[good6.bminor Output]===
Success!

a resolves to param 1
b resolves to param 2
a resolves to param 1
b resolves to param 2
a resolves to param 1
test1 resolves to global test1
test2 resolves to global test2
test3 resolves to global test3


return code: 0


===[good7.bminor Input]===
/* Test function invocations with prototypes. */

test1:function integer (a:integer, b:integer);
test2:function boolean (a:integer, b:integer);
test3:function string (a:integer);

main:function void ()=
{
	x:integer = test1(5, 6);
	test2(5, 6);
	print test3(7);
}

test1:function integer (a:integer, b:integer)=
{
	return a + b;
}

test2:function boolean (a:integer, b:integer)=
{
	return a==b;
}

test3:function string (a:integer)=
{
	if (test1(1, 5) > 6)
	{
		return "hello world";
	}
}

===[good7.bminor Output]===
Success!

test1 resolves to global test1
test2 resolves to global test2
test3 resolves to global test3
a resolves to param 1
b resolves to param 2
a resolves to param 1
b resolves to param 2
test1 resolves to global test1


return code: 0


===[good8.bminor Input]===
/* Update one element of an array. */

x:array [5] integer = {1,2,3,4,5};

main:function void () =
{
	x[4] = 4;
}

===[good8.bminor Output]===
Success!

x resolves to global x


return code: 0


===[good9.bminor Input]===
/* Update array with values from function calls. */

x: array [5] integer = {1,2,3,4,5};
intFxn: function integer ();

main: function void () =
{
	x[4] = intFxn();
	x[intFxn()] = 4;
	
}
intFxn: function integer () =
{
	return 3;
}

===[good9.bminor Output]===
Success!

x resolves to global x
intFxn resolves to global intFxn
x resolves to global x
intFxn resolves to global intFxn


return code: 0


====Bad Tests====
===[bad1.bminor Input]===
x: integer = 5;
y: integer = 10;

main: function void ()=
{
	z: integer = 0;
	z = x + y;
	x: integer = 10;
	z: integer = x + y;
}
===[bad1.bminor Output]===
Success!

z resolves to local 1
x resolves to global x
y resolves to global y
resolve error: duplicate declaration of z
x resolves to local 2
y resolves to global y


return code: 1


===[bad10.bminor Input]===
main: function void() = {
    printf("Hello World");
}
===[bad10.bminor Output]===
Success!

resolve error: printf is not defined


return code: 1


===[bad2.bminor Input]===
func1: function void (s:string);
func2: function void (s:string);

main: function void() = {
    func3("hello");
}
===[bad2.bminor Output]===
Success!

resolve error: func3 is not defined


return code: 1


===[bad3.bminor Input]===
func1: function void (s:string);

func1: function integer (s:string) = {
    return 1;
}
===[bad3.bminor Output]===
Success!

resolve error: function func1 does not match prototype


return code: 1


===[bad4.bminor Input]===
/* Cannot use a function without declaring it. */

x: integer = 5;
y: integer = 10;

main: function void ()=
{
	x:integer = y * 10 + 15 - test();
}

test: function char () =
{
	return 'a';
}
===[bad4.bminor Output]===
Success!

y resolves to global y
resolve error: test is not defined


return code: 1


===[bad5.bminor Input]===
/* Cannot use a variable x that is not defined in the current scope. */

y: integer = 10;

main: function void ()=
{
	y: integer = 10;
	{
		
		y: integer = 10;
		{
			
			x: integer = 5;
			y: integer = 10;
		}
		y = x + y;
	}
}
	
===[bad5.bminor Output]===
Success!

y resolves to local 2
resolve error: x is not defined
y resolves to local 2


return code: 1


===[bad6.bminor Input]===
/* Function definitions must match prior prototypes. */

test1: function integer (a:integer, b:integer);
test2: function boolean (a:integer, b:integer);

main: function void () =
{
	str: string = "hi";
}



/* Return type differs from prototype. */

test2: function integer (a:integer, b:integer) =
{ 
	return a + b;
}
===[bad6.bminor Output]===
Success!

resolve error: function test2 does not match prototype
a resolves to param 1
b resolves to param 2


return code: 1


===[bad7.bminor Input]===
/* Function definitions must match prior prototypes. */

test1: function integer (a:integer, b:integer);
test2: function boolean (a:integer, b:integer);
test3: function string (a:integer);

main: function void () =
{
	str: string = "hi";
}

test2: function integer (a:integer, b:integer) =
{ 
	return a + b;
}
/* Parameter type differs from prototype. */

test3: function string (a:boolean) =
{
	return "hello!";
}

===[bad7.bminor Output]===
Success!

resolve error: function test2 does not match prototype
a resolves to param 1
b resolves to param 2
resolve error: function test3 does not match prototype


return code: 1


===[bad8.bminor Input]===
main: function void () =
{
	str: string = "hi";
}
main: function void () =
{
	str: string = "h2";
}
===[bad8.bminor Output]===
Success!

resolve error: duplicate definition of main


return code: 1


===[bad9.bminor Input]===
test1: function void (a:integer, a:float);
===[bad9.bminor Output]===
Success!

resolve error: a is already defined in parameter list


return code: 1


=====HIDDEN TESTS=====
====Good Tests====
===[good1.bminor Input]===
/* Correct: x used but not defined. */

x: integer = 10;

===[good1.bminor Output]===
Success!



return code: 0


===[good10.bminor Input]===
/* Correct: Many variables to resolve. */

D: function integer() = {
        d1: integer = 5;
        d2: integer = d1 + 1; //6
        {
                d3: integer = 9;
                d2: integer = d3 + d1 - 3; //11
                d4: integer = -1;
                d2 = d2 + d3; //20
                print d2 - d4, "\n";
        }
        d4: integer = 16;
        print d2 - d4, '\n';
        {
                d4: integer = -2;
                d3: integer = 1000;
                print d3 + 10;
                print "\n";
                print d4;
                print '\n';
        }
        print d4;
        return 3;
}

main: function integer () = {
        return D();
}

===[good10.bminor Output]===
Success!

d1 resolves to local 1
d3 resolves to local 3
d1 resolves to local 1
d2 resolves to local 4
d2 resolves to local 4
d3 resolves to local 3
d2 resolves to local 4
d4 resolves to local 5
d2 resolves to local 2
d4 resolves to local 3
d3 resolves to local 5
d4 resolves to local 4
d4 resolves to local 3
D resolves to global D


return code: 0


===[good2.bminor Input]===
/* Correct: redefining a name at the local scope. */

x: integer = 10;

f: function void () = {
     x: integer = 20;
     print x, "\n";
}


===[good2.bminor Output]===
Success!

x resolves to local 1


return code: 0


===[good3.bminor Input]===
/* Correct: redefining a name at the local scope. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     x: integer = 20;
     if(a<b) {
          x: integer = 30;
          print x, "\n";
     } else {
          print "a>=b\n";
     }
}



===[good3.bminor Output]===
Success!

a resolves to param 1
b resolves to param 2
x resolves to local 2


return code: 0


===[good4.bminor Input]===
/* Correct: Accessing names in different scopes. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }

}


===[good4.bminor Output]===
Success!

a resolves to param 1
b resolves to param 2
x resolves to global x
y resolves to local 1
z resolves to local 2


return code: 0


===[good5.bminor Input]===
/* Correct: f is called multiple times from main. */
/* (Should resolve the expression before adding the decl of y. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = a * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}

main: function integer ( argc: integer, argv: array [] string ) = {
     f(10,20);
     f(40,30);
}



===[good5.bminor Output]===
Success!

a resolves to param 1
a resolves to param 1
b resolves to param 2
x resolves to global x
y resolves to local 1
z resolves to local 2
f resolves to global f
f resolves to global f


return code: 0


===[good6.bminor Input]===
/* Correct: f is prototyped, then defined, then called. */

x: integer = 10;

f: function void ( a: integer, b: integer );

f: function void ( a: integer, b: integer ) = {
     y: integer = a * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}

main: function integer ( argc: integer, argv: array [] string ) = {
     f(10,20);
     f(40,30);
}




===[good6.bminor Output]===
Success!

a resolves to param 1
a resolves to param 1
b resolves to param 2
x resolves to global x
y resolves to local 1
z resolves to local 2
f resolves to global f
f resolves to global f


return code: 0


===[good7.bminor Input]===
/* Correct: f is prototyped, then called, then defined. */

x: integer = 10;

f: function void ( a: integer, b: integer );

main: function integer ( argc: integer, argv: array [] string ) = {
     f(10,20);
     f(40,30);
}

f: function void ( a: integer, b: integer ) = {
     y: integer = a * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}



===[good7.bminor Output]===
Success!

f resolves to global f
f resolves to global f
a resolves to param 1
a resolves to param 1
b resolves to param 2
x resolves to global x
y resolves to local 1
z resolves to local 2


return code: 0


===[good8.bminor Input]===
/* Correct: Resolver should work all the way down the tree. */

f: function void ( n:integer, s: string ) =
{
	i:integer;

	for(i=0;i<n;i++) { 
		if( i%2 == 0 ) {
			print i, "is even\n";
		} else {
			print i, "is odd\n";
		}
	}

	/* We can open a new scope with braces */
	{
		i: integer;
		j: integer;
		for(i=0;i<n;i++) {
			for(j=0;j<n;j++) {
				print i, ":", j, " -> ", i*j, " ", s, "\n";
			}
		}
	}
}

===[good8.bminor Output]===
Success!

i resolves to local 1
i resolves to local 1
n resolves to param 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 1
i resolves to local 2
i resolves to local 2
n resolves to param 1
i resolves to local 2
j resolves to local 3
j resolves to local 3
n resolves to param 1
j resolves to local 3
i resolves to local 2
j resolves to local 3
i resolves to local 2
j resolves to local 3
s resolves to param 2


return code: 0


===[good9.bminor Input]===
/* Correct: Different functions can define variables with same params and locals. */

x: integer = 10;

f: function integer ( x: integer ) =
{
	y: integer = 20;
	return x*y;
}

g: function void ( x: integer ) =
{
	y: integer = 30;
	return x*y;
}

main: function integer ( argc: integer, argv: array [] string ) =
{
	return f(x) + g(x);
}

===[good9.bminor Output]===
Success!

x resolves to param 1
y resolves to local 1
x resolves to param 1
y resolves to local 1
f resolves to global f
x resolves to global x
g resolves to global g
x resolves to global x


return code: 0


===[good11.bminor Input]===
e: function integer () = {
        e: integer = 100;
	return e;
}

main: function integer () = {
        return e();
}

===[good11.bminor Output]===
Success!

e resolves to local 1
e resolves to global e


return code: 0


====Bad Tests====
===[bad1.bminor Input]===
/* Error: name already used in the global scope. */
x: integer = 10;
x: integer = 20;


===[bad1.bminor Output]===
Success!

resolve error: duplicate declaration of x


return code: 1


===[bad10.bminor Input]===
/* Error: Function has the same name as a declared variable. */

str: string = "hello";

str: function string ( s: string ) = 
{
	return "goodbye";
}


===[bad10.bminor Output]===
Success!

resolve error: duplicate definition of str


return code: 1


===[bad2.bminor Input]===
/* Error: Variable z went out of scope. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = 20;
     if(a<b) {
          z: integer = 30;
	  print "a<b\n";
     }
     print x, " ", y, " ", z, "\n";
}


===[bad2.bminor Output]===
Success!

a resolves to param 1
b resolves to param 2
x resolves to global x
y resolves to local 1
resolve error: z is not defined


return code: 1


===[bad3.bminor Input]===
/* Error: Cannot refer to variable y in its own definition. */
/* (Should resolve the expression before adding the decl of y. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = y * 20;
     if(a<b) {
          z: integer = 30;
	  print "a<b\n";
     } else {
          print "a>=b\n";
     }
     print x, " ", y, " ", z, "\n";
}


===[bad3.bminor Output]===
Success!

resolve error: y is not defined
a resolves to param 1
b resolves to param 2
x resolves to global x
y resolves to local 1
resolve error: z is not defined


return code: 1


===[bad4.bminor Input]===
/* Error: f has multiple definitions. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = y * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}

f: function string ( s: string ) = {
    print "hello";
    return "goodbye";
}


===[bad4.bminor Output]===
Success!

resolve error: y is not defined
a resolves to param 1
b resolves to param 2
x resolves to global x
y resolves to local 1
z resolves to local 2
resolve error: duplicate definition of f


return code: 1


===[bad5.bminor Input]===
/* Error: f is called prior to definition. */

x: integer = 10;

main: function integer ( argc: integer, argv: array [] string ) = {
     f(10,20);
     f(40,30);
}

f: function void ( a: integer, b: integer ) = {
     y: integer = y * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}



===[bad5.bminor Output]===
Success!

resolve error: f is not defined
resolve error: f is not defined
resolve error: y is not defined
a resolves to param 1
b resolves to param 2
x resolves to global x
y resolves to local 1
z resolves to local 2


return code: 1


===[bad6.bminor Input]===
/* Error: g is not defined. */

x: integer = 10;

f: function void ( a: integer, b: integer ) = {
     y: integer = y * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}

main: function integer ( argc: integer, argv: array [] string ) = {
     f(10,20);
     g(40,30);
}


===[bad6.bminor Output]===
Success!

resolve error: y is not defined
a resolves to param 1
b resolves to param 2
x resolves to global x
y resolves to local 1
z resolves to local 2
f resolves to global f
resolve error: g is not defined


return code: 1


===[bad7.bminor Input]===
/* Error: Two parameters have the same name */
/* Also, b is not defined. */

f: function void ( a: integer, a: integer ) = {
     y: integer = y * 20;
     if(a<b) {
          z: integer = 30;
          print x, " ", y, " ", z, "\n";
     } else {
          print "a>=b\n";
     }
}

===[bad7.bminor Output]===
Success!

resolve error: a is already defined in parameter list
resolve error: y is not defined
a resolves to param 1
resolve error: b is not defined
resolve error: x is not defined
y resolves to local 1
z resolves to local 2


return code: 1


===[bad8.bminor Input]===
/* Error: x not defined, deep down in the expression. */

a: integer;

f: function integer ( b: integer ) =
{
	c: integer;
	for(c=0;c<b;c++) {
		if(a<b) {
			print a + b * (c / (a+x)), "\n"; 
		}
	}
	return b;
}

===[bad8.bminor Output]===
Success!

c resolves to local 1
c resolves to local 1
b resolves to param 1
c resolves to local 1
a resolves to global a
b resolves to param 1
a resolves to global a
b resolves to param 1
c resolves to local 1
a resolves to global a
resolve error: x is not defined
b resolves to param 1


return code: 1


===[bad9.bminor Input]===
/* Error: x redefined after several intervening scopes. */

a: integer;

f: function integer ( b: integer ) =
{
	x: integer = 20;
	{
		i: integer;
		for(i=0;i<x;i++) print i;
	}
	{
		j: integer;
		for(j=0;j<x;j++) print j;
	}
	x: integer = 30;

	return x;
}

===[bad9.bminor Output]===
Success!

i resolves to local 2
i resolves to local 2
x resolves to local 1
i resolves to local 2
i resolves to local 2
j resolves to local 2
j resolves to local 2
x resolves to local 1
j resolves to local 2
j resolves to local 2
resolve error: duplicate declaration of x
x resolves to local 1


return code: 1


===== SUMMARIZED PARSER RESULTS =====
{
  "student_tests": {
    "Good": {
      "correct": 13,
      "incorrect": 0
    },
    "Bad": {
      "correct": 10,
      "incorrect": 0
    }
  },
  "hidden_tests": {
    "Good": {
      "correct": 11,
      "incorrect": 0
    },
    "Bad": {
      "correct": 10,
      "incorrect": 0
    }
  }
}

Resolver Project Grade
-------------------

General Structure: 25/25
---------------------------------
Overall structure is correct.

Resolver - Manual Checks 25/25 
--------------------------------------------
resolution and scopes look good

Student Tests: 20/20
---------------------------
Passes all your tests.

Hidden Tests: 20/20
---------------------------
Passes all hidden tests

Code Style: 10/10
------------------------
Looks good. Great work

Total: 100/100
------------------------------------------
